// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockAsymSigningKeys is an autogenerated mock type for the AsymSigningKeys type
type MockAsymSigningKeys struct {
	mock.Mock
}

// CreateAsymSigningKey provides a mock function with given fields: ctx, asymSigningKey
func (_m *MockAsymSigningKeys) CreateAsymSigningKey(ctx context.Context, asymSigningKey *models.AsymSigningKey) (*models.AsymSigningKey, error) {
	ret := _m.Called(ctx, asymSigningKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsymSigningKey")
	}

	var r0 *models.AsymSigningKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AsymSigningKey) (*models.AsymSigningKey, error)); ok {
		return rf(ctx, asymSigningKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AsymSigningKey) *models.AsymSigningKey); ok {
		r0 = rf(ctx, asymSigningKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AsymSigningKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AsymSigningKey) error); ok {
		r1 = rf(ctx, asymSigningKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAsymSigningKey provides a mock function with given fields: ctx, asymSigningKey
func (_m *MockAsymSigningKeys) DeleteAsymSigningKey(ctx context.Context, asymSigningKey *models.AsymSigningKey) error {
	ret := _m.Called(ctx, asymSigningKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsymSigningKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AsymSigningKey) error); ok {
		r0 = rf(ctx, asymSigningKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAsymSigningKeyByID provides a mock function with given fields: ctx, id
func (_m *MockAsymSigningKeys) GetAsymSigningKeyByID(ctx context.Context, id string) (*models.AsymSigningKey, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAsymSigningKeyByID")
	}

	var r0 *models.AsymSigningKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.AsymSigningKey, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AsymSigningKey); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AsymSigningKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsymSigningKeyByTRN provides a mock function with given fields: ctx, trn
func (_m *MockAsymSigningKeys) GetAsymSigningKeyByTRN(ctx context.Context, trn string) (*models.AsymSigningKey, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetAsymSigningKeyByTRN")
	}

	var r0 *models.AsymSigningKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.AsymSigningKey, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AsymSigningKey); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AsymSigningKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsymSigningKeys provides a mock function with given fields: ctx, input
func (_m *MockAsymSigningKeys) GetAsymSigningKeys(ctx context.Context, input *GetAsymSigningKeysInput) (*AsymSigningKeysResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetAsymSigningKeys")
	}

	var r0 *AsymSigningKeysResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetAsymSigningKeysInput) (*AsymSigningKeysResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetAsymSigningKeysInput) *AsymSigningKeysResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AsymSigningKeysResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetAsymSigningKeysInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsymSigningKey provides a mock function with given fields: ctx, asymSigningKey
func (_m *MockAsymSigningKeys) UpdateAsymSigningKey(ctx context.Context, asymSigningKey *models.AsymSigningKey) (*models.AsymSigningKey, error) {
	ret := _m.Called(ctx, asymSigningKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsymSigningKey")
	}

	var r0 *models.AsymSigningKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AsymSigningKey) (*models.AsymSigningKey, error)); ok {
		return rf(ctx, asymSigningKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AsymSigningKey) *models.AsymSigningKey); ok {
		r0 = rf(ctx, asymSigningKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AsymSigningKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AsymSigningKey) error); ok {
		r1 = rf(ctx, asymSigningKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAsymSigningKeys creates a new instance of MockAsymSigningKeys. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsymSigningKeys(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsymSigningKeys {
	mock := &MockAsymSigningKeys{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
