// Code generated by mockery v2.20.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockLogStreams is an autogenerated mock type for the LogStreams type
type MockLogStreams struct {
	mock.Mock
}

// CreateLogStream provides a mock function with given fields: ctx, logStream
func (_m *MockLogStreams) CreateLogStream(ctx context.Context, logStream *models.LogStream) (*models.LogStream, error) {
	ret := _m.Called(ctx, logStream)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LogStream) (*models.LogStream, error)); ok {
		return rf(ctx, logStream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.LogStream) *models.LogStream); ok {
		r0 = rf(ctx, logStream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.LogStream) error); ok {
		r1 = rf(ctx, logStream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStreamByID provides a mock function with given fields: ctx, id
func (_m *MockLogStreams) GetLogStreamByID(ctx context.Context, id string) (*models.LogStream, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LogStream, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LogStream); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStreamByJobID provides a mock function with given fields: ctx, jobID
func (_m *MockLogStreams) GetLogStreamByJobID(ctx context.Context, jobID string) (*models.LogStream, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LogStream, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LogStream); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStreamByRunnerSessionID provides a mock function with given fields: ctx, sessionID
func (_m *MockLogStreams) GetLogStreamByRunnerSessionID(ctx context.Context, sessionID string) (*models.LogStream, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.LogStream, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.LogStream); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStreams provides a mock function with given fields: ctx, input
func (_m *MockLogStreams) GetLogStreams(ctx context.Context, input *GetLogStreamsInput) (*LogStreamsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *LogStreamsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetLogStreamsInput) (*LogStreamsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetLogStreamsInput) *LogStreamsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogStreamsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetLogStreamsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogStream provides a mock function with given fields: ctx, logStream
func (_m *MockLogStreams) UpdateLogStream(ctx context.Context, logStream *models.LogStream) (*models.LogStream, error) {
	ret := _m.Called(ctx, logStream)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LogStream) (*models.LogStream, error)); ok {
		return rf(ctx, logStream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.LogStream) *models.LogStream); ok {
		r0 = rf(ctx, logStream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.LogStream) error); ok {
		r1 = rf(ctx, logStream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockLogStreams interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLogStreams creates a new instance of MockLogStreams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLogStreams(t mockConstructorTestingTNewMockLogStreams) *MockLogStreams {
	mock := &MockLogStreams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
