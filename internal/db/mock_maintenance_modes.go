// Code generated by mockery v2.20.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockMaintenanceModes is an autogenerated mock type for the MaintenanceModes type
type MockMaintenanceModes struct {
	mock.Mock
}

// CreateMaintenanceMode provides a mock function with given fields: ctx, mode
func (_m *MockMaintenanceModes) CreateMaintenanceMode(ctx context.Context, mode *models.MaintenanceMode) (*models.MaintenanceMode, error) {
	ret := _m.Called(ctx, mode)

	var r0 *models.MaintenanceMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.MaintenanceMode) (*models.MaintenanceMode, error)); ok {
		return rf(ctx, mode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.MaintenanceMode) *models.MaintenanceMode); ok {
		r0 = rf(ctx, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MaintenanceMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.MaintenanceMode) error); ok {
		r1 = rf(ctx, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMaintenanceMode provides a mock function with given fields: ctx, mode
func (_m *MockMaintenanceModes) DeleteMaintenanceMode(ctx context.Context, mode *models.MaintenanceMode) error {
	ret := _m.Called(ctx, mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.MaintenanceMode) error); ok {
		r0 = rf(ctx, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMaintenanceMode provides a mock function with given fields: ctx
func (_m *MockMaintenanceModes) GetMaintenanceMode(ctx context.Context) (*models.MaintenanceMode, error) {
	ret := _m.Called(ctx)

	var r0 *models.MaintenanceMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.MaintenanceMode, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.MaintenanceMode); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MaintenanceMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockMaintenanceModes interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMaintenanceModes creates a new instance of MockMaintenanceModes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMaintenanceModes(t mockConstructorTestingTNewMockMaintenanceModes) *MockMaintenanceModes {
	mock := &MockMaintenanceModes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
