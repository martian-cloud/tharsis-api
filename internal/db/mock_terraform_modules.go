// Code generated by mockery v2.14.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformModules is an autogenerated mock type for the TerraformModules type
type MockTerraformModules struct {
	mock.Mock
}

// CreateModule provides a mock function with given fields: ctx, module
func (_m *MockTerraformModules) CreateModule(ctx context.Context, module *models.TerraformModule) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, module)

	var r0 *models.TerraformModule
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) *models.TerraformModule); ok {
		r0 = rf(ctx, module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModule) error); ok {
		r1 = rf(ctx, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModule provides a mock function with given fields: ctx, module
func (_m *MockTerraformModules) DeleteModule(ctx context.Context, module *models.TerraformModule) error {
	ret := _m.Called(ctx, module)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) error); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModuleByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformModules) GetModuleByID(ctx context.Context, id string) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformModule
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModule); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleByPath provides a mock function with given fields: ctx, path
func (_m *MockTerraformModules) GetModuleByPath(ctx context.Context, path string) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, path)

	var r0 *models.TerraformModule
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModule); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModules provides a mock function with given fields: ctx, input
func (_m *MockTerraformModules) GetModules(ctx context.Context, input *GetModulesInput) (*ModulesResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ModulesResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetModulesInput) *ModulesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModulesResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetModulesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModule provides a mock function with given fields: ctx, module
func (_m *MockTerraformModules) UpdateModule(ctx context.Context, module *models.TerraformModule) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, module)

	var r0 *models.TerraformModule
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) *models.TerraformModule); ok {
		r0 = rf(ctx, module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModule) error); ok {
		r1 = rf(ctx, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTerraformModules interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTerraformModules creates a new instance of MockTerraformModules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerraformModules(t mockConstructorTestingTNewMockTerraformModules) *MockTerraformModules {
	mock := &MockTerraformModules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
