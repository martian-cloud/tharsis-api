// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockActivityEvents is an autogenerated mock type for the ActivityEvents type
type MockActivityEvents struct {
	mock.Mock
}

// CreateActivityEvent provides a mock function with given fields: ctx, input
func (_m *MockActivityEvents) CreateActivityEvent(ctx context.Context, input *models.ActivityEvent) (*models.ActivityEvent, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.ActivityEvent
	if rf, ok := ret.Get(0).(func(context.Context, *models.ActivityEvent) *models.ActivityEvent); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ActivityEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ActivityEvent) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityEvents provides a mock function with given fields: ctx, input
func (_m *MockActivityEvents) GetActivityEvents(ctx context.Context, input *GetActivityEventsInput) (*ActivityEventsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ActivityEventsResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetActivityEventsInput) *ActivityEventsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ActivityEventsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetActivityEventsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockActivityEvents interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockActivityEvents creates a new instance of MockActivityEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockActivityEvents(t mockConstructorTestingTNewMockActivityEvents) *MockActivityEvents {
	mock := &MockActivityEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
