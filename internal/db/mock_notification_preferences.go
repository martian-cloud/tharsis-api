// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockNotificationPreferences is an autogenerated mock type for the NotificationPreferences type
type MockNotificationPreferences struct {
	mock.Mock
}

// CreateNotificationPreference provides a mock function with given fields: ctx, preference
func (_m *MockNotificationPreferences) CreateNotificationPreference(ctx context.Context, preference *models.NotificationPreference) (*models.NotificationPreference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationPreference")
	}

	var r0 *models.NotificationPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NotificationPreference) (*models.NotificationPreference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NotificationPreference) *models.NotificationPreference); ok {
		r0 = rf(ctx, preference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NotificationPreference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationPreference provides a mock function with given fields: ctx, preference
func (_m *MockNotificationPreferences) DeleteNotificationPreference(ctx context.Context, preference *models.NotificationPreference) error {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NotificationPreference) error); ok {
		r0 = rf(ctx, preference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationPreferenceByID provides a mock function with given fields: ctx, id
func (_m *MockNotificationPreferences) GetNotificationPreferenceByID(ctx context.Context, id string) (*models.NotificationPreference, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationPreferenceByID")
	}

	var r0 *models.NotificationPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.NotificationPreference, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.NotificationPreference); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationPreferences provides a mock function with given fields: ctx, input
func (_m *MockNotificationPreferences) GetNotificationPreferences(ctx context.Context, input *GetNotificationPreferencesInput) (*NotificationPreferencesResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationPreferences")
	}

	var r0 *NotificationPreferencesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetNotificationPreferencesInput) (*NotificationPreferencesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetNotificationPreferencesInput) *NotificationPreferencesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationPreferencesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetNotificationPreferencesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotificationPreference provides a mock function with given fields: ctx, preference
func (_m *MockNotificationPreferences) UpdateNotificationPreference(ctx context.Context, preference *models.NotificationPreference) (*models.NotificationPreference, error) {
	ret := _m.Called(ctx, preference)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationPreference")
	}

	var r0 *models.NotificationPreference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NotificationPreference) (*models.NotificationPreference, error)); ok {
		return rf(ctx, preference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NotificationPreference) *models.NotificationPreference); ok {
		r0 = rf(ctx, preference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationPreference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NotificationPreference) error); ok {
		r1 = rf(ctx, preference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockNotificationPreferences creates a new instance of MockNotificationPreferences. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationPreferences(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationPreferences {
	mock := &MockNotificationPreferences{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
