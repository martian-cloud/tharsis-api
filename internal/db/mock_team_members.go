// Code generated by mockery v2.14.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTeamMembers is an autogenerated mock type for the TeamMembers type
type MockTeamMembers struct {
	mock.Mock
}

// AddUserToTeam provides a mock function with given fields: ctx, teamMember
func (_m *MockTeamMembers) AddUserToTeam(ctx context.Context, teamMember *models.TeamMember) (*models.TeamMember, error) {
	ret := _m.Called(ctx, teamMember)

	var r0 *models.TeamMember
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) *models.TeamMember); ok {
		r0 = rf(ctx, teamMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamMember) error); ok {
		r1 = rf(ctx, teamMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMember provides a mock function with given fields: ctx, userID, teamID
func (_m *MockTeamMembers) GetTeamMember(ctx context.Context, userID string, teamID string) (*models.TeamMember, error) {
	ret := _m.Called(ctx, userID, teamID)

	var r0 *models.TeamMember
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.TeamMember); ok {
		r0 = rf(ctx, userID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMemberByID provides a mock function with given fields: ctx, teamMemberID
func (_m *MockTeamMembers) GetTeamMemberByID(ctx context.Context, teamMemberID string) (*models.TeamMember, error) {
	ret := _m.Called(ctx, teamMemberID)

	var r0 *models.TeamMember
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TeamMember); ok {
		r0 = rf(ctx, teamMemberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, teamMemberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMembers provides a mock function with given fields: ctx, input
func (_m *MockTeamMembers) GetTeamMembers(ctx context.Context, input *GetTeamMembersInput) (*TeamMembersResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *TeamMembersResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetTeamMembersInput) *TeamMembersResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamMembersResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTeamMembersInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromTeam provides a mock function with given fields: ctx, teamMember
func (_m *MockTeamMembers) RemoveUserFromTeam(ctx context.Context, teamMember *models.TeamMember) error {
	ret := _m.Called(ctx, teamMember)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) error); ok {
		r0 = rf(ctx, teamMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeamMember provides a mock function with given fields: ctx, teamMember
func (_m *MockTeamMembers) UpdateTeamMember(ctx context.Context, teamMember *models.TeamMember) (*models.TeamMember, error) {
	ret := _m.Called(ctx, teamMember)

	var r0 *models.TeamMember
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) *models.TeamMember); ok {
		r0 = rf(ctx, teamMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamMember) error); ok {
		r1 = rf(ctx, teamMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTeamMembers interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTeamMembers creates a new instance of MockTeamMembers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTeamMembers(t mockConstructorTestingTNewMockTeamMembers) *MockTeamMembers {
	mock := &MockTeamMembers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
