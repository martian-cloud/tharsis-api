// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockSCIMTokens is an autogenerated mock type for the SCIMTokens type
type MockSCIMTokens struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: ctx, token
func (_m *MockSCIMTokens) CreateToken(ctx context.Context, token *models.SCIMToken) (*models.SCIMToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *models.SCIMToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SCIMToken) (*models.SCIMToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SCIMToken) *models.SCIMToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SCIMToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SCIMToken) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: ctx, token
func (_m *MockSCIMTokens) DeleteToken(ctx context.Context, token *models.SCIMToken) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SCIMToken) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTokenByNonce provides a mock function with given fields: ctx, nonce
func (_m *MockSCIMTokens) GetTokenByNonce(ctx context.Context, nonce string) (*models.SCIMToken, error) {
	ret := _m.Called(ctx, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenByNonce")
	}

	var r0 *models.SCIMToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.SCIMToken, error)); ok {
		return rf(ctx, nonce)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SCIMToken); ok {
		r0 = rf(ctx, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SCIMToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokens provides a mock function with given fields: ctx
func (_m *MockSCIMTokens) GetTokens(ctx context.Context) ([]models.SCIMToken, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTokens")
	}

	var r0 []models.SCIMToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.SCIMToken, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.SCIMToken); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SCIMToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSCIMTokens creates a new instance of MockSCIMTokens. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSCIMTokens(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSCIMTokens {
	mock := &MockSCIMTokens{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
