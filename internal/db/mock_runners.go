// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRunners is an autogenerated mock type for the Runners type
type MockRunners struct {
	mock.Mock
}

// CreateRunner provides a mock function with given fields: ctx, runner
func (_m *MockRunners) CreateRunner(ctx context.Context, runner *models.Runner) (*models.Runner, error) {
	ret := _m.Called(ctx, runner)

	if len(ret) == 0 {
		panic("no return value specified for CreateRunner")
	}

	var r0 *models.Runner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Runner) (*models.Runner, error)); ok {
		return rf(ctx, runner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Runner) *models.Runner); ok {
		r0 = rf(ctx, runner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Runner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Runner) error); ok {
		r1 = rf(ctx, runner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRunner provides a mock function with given fields: ctx, runner
func (_m *MockRunners) DeleteRunner(ctx context.Context, runner *models.Runner) error {
	ret := _m.Called(ctx, runner)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRunner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Runner) error); ok {
		r0 = rf(ctx, runner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRunnerByID provides a mock function with given fields: ctx, id
func (_m *MockRunners) GetRunnerByID(ctx context.Context, id string) (*models.Runner, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerByID")
	}

	var r0 *models.Runner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Runner, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Runner); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Runner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunnerByTRN provides a mock function with given fields: ctx, trn
func (_m *MockRunners) GetRunnerByTRN(ctx context.Context, trn string) (*models.Runner, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerByTRN")
	}

	var r0 *models.Runner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Runner, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Runner); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Runner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunners provides a mock function with given fields: ctx, input
func (_m *MockRunners) GetRunners(ctx context.Context, input *GetRunnersInput) (*RunnersResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetRunners")
	}

	var r0 *RunnersResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunnersInput) (*RunnersResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunnersInput) *RunnersResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunnersResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetRunnersInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRunner provides a mock function with given fields: ctx, runner
func (_m *MockRunners) UpdateRunner(ctx context.Context, runner *models.Runner) (*models.Runner, error) {
	ret := _m.Called(ctx, runner)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRunner")
	}

	var r0 *models.Runner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Runner) (*models.Runner, error)); ok {
		return rf(ctx, runner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Runner) *models.Runner); ok {
		r0 = rf(ctx, runner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Runner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Runner) error); ok {
		r1 = rf(ctx, runner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRunners creates a new instance of MockRunners. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunners(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunners {
	mock := &MockRunners{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
