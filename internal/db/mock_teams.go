// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTeams is an autogenerated mock type for the Teams type
type MockTeams struct {
	mock.Mock
}

// CreateTeam provides a mock function with given fields: ctx, team
func (_m *MockTeams) CreateTeam(ctx context.Context, team *models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Team) (*models.Team, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Team) *models.Team); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Team) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: ctx, team
func (_m *MockTeams) DeleteTeam(ctx context.Context, team *models.Team) error {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Team) error); ok {
		r0 = rf(ctx, team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeamByID provides a mock function with given fields: ctx, id
func (_m *MockTeams) GetTeamByID(ctx context.Context, id string) (*models.Team, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByID")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Team, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Team); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamBySCIMExternalID provides a mock function with given fields: ctx, scimExternalID
func (_m *MockTeams) GetTeamBySCIMExternalID(ctx context.Context, scimExternalID string) (*models.Team, error) {
	ret := _m.Called(ctx, scimExternalID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamBySCIMExternalID")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Team, error)); ok {
		return rf(ctx, scimExternalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Team); ok {
		r0 = rf(ctx, scimExternalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, scimExternalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamByTRN provides a mock function with given fields: ctx, trn
func (_m *MockTeams) GetTeamByTRN(ctx context.Context, trn string) (*models.Team, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByTRN")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Team, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Team); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields: ctx, input
func (_m *MockTeams) GetTeams(ctx context.Context, input *GetTeamsInput) (*TeamsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 *TeamsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetTeamsInput) (*TeamsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetTeamsInput) *TeamsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetTeamsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeam provides a mock function with given fields: ctx, team
func (_m *MockTeams) UpdateTeam(ctx context.Context, team *models.Team) (*models.Team, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *models.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Team) (*models.Team, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Team) *models.Team); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Team) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTeams creates a new instance of MockTeams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeams(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeams {
	mock := &MockTeams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
