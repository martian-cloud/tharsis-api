// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockFederatedRegistries is an autogenerated mock type for the FederatedRegistries type
type MockFederatedRegistries struct {
	mock.Mock
}

// CreateFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockFederatedRegistries) CreateFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for CreateFederatedRegistry")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, federatedRegistry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) *models.FederatedRegistry); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FederatedRegistry) error); ok {
		r1 = rf(ctx, federatedRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockFederatedRegistries) DeleteFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) error {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFederatedRegistry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) error); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFederatedRegistries provides a mock function with given fields: ctx, input
func (_m *MockFederatedRegistries) GetFederatedRegistries(ctx context.Context, input *GetFederatedRegistriesInput) (*FederatedRegistriesResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistries")
	}

	var r0 *FederatedRegistriesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetFederatedRegistriesInput) (*FederatedRegistriesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetFederatedRegistriesInput) *FederatedRegistriesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FederatedRegistriesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetFederatedRegistriesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederatedRegistryByID provides a mock function with given fields: ctx, id
func (_m *MockFederatedRegistries) GetFederatedRegistryByID(ctx context.Context, id string) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistryByID")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FederatedRegistry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederatedRegistryByTRN provides a mock function with given fields: ctx, trn
func (_m *MockFederatedRegistries) GetFederatedRegistryByTRN(ctx context.Context, trn string) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistryByTRN")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FederatedRegistry); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockFederatedRegistries) UpdateFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFederatedRegistry")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, federatedRegistry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) *models.FederatedRegistry); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FederatedRegistry) error); ok {
		r1 = rf(ctx, federatedRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFederatedRegistries creates a new instance of MockFederatedRegistries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFederatedRegistries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFederatedRegistries {
	mock := &MockFederatedRegistries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
