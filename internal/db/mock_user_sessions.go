// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockUserSessions is an autogenerated mock type for the UserSessions type
type MockUserSessions struct {
	mock.Mock
}

// CreateUserSession provides a mock function with given fields: ctx, session
func (_m *MockUserSessions) CreateUserSession(ctx context.Context, session *models.UserSession) (*models.UserSession, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserSession")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession) (*models.UserSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession) *models.UserSession); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserSession provides a mock function with given fields: ctx, session
func (_m *MockUserSessions) DeleteUserSession(ctx context.Context, session *models.UserSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserSessionByID provides a mock function with given fields: ctx, id
func (_m *MockUserSessions) GetUserSessionByID(ctx context.Context, id string) (*models.UserSession, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionByID")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserSession, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserSession); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionByTRN provides a mock function with given fields: ctx, trn
func (_m *MockUserSessions) GetUserSessionByTRN(ctx context.Context, trn string) (*models.UserSession, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionByTRN")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserSession, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserSession); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessions provides a mock function with given fields: ctx, input
func (_m *MockUserSessions) GetUserSessions(ctx context.Context, input *GetUserSessionsInput) (*UserSessionsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessions")
	}

	var r0 *UserSessionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserSessionsInput) (*UserSessionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserSessionsInput) *UserSessionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserSessionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserSessionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSession provides a mock function with given fields: ctx, session
func (_m *MockUserSessions) UpdateUserSession(ctx context.Context, session *models.UserSession) (*models.UserSession, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSession")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession) (*models.UserSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession) *models.UserSession); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserSessions creates a new instance of MockUserSessions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSessions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSessions {
	mock := &MockUserSessions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
