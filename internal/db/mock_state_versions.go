// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockStateVersions is an autogenerated mock type for the StateVersions type
type MockStateVersions struct {
	mock.Mock
}

// CreateStateVersion provides a mock function with given fields: ctx, stateVersion
func (_m *MockStateVersions) CreateStateVersion(ctx context.Context, stateVersion *models.StateVersion) (*models.StateVersion, error) {
	ret := _m.Called(ctx, stateVersion)

	if len(ret) == 0 {
		panic("no return value specified for CreateStateVersion")
	}

	var r0 *models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) (*models.StateVersion, error)); ok {
		return rf(ctx, stateVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) *models.StateVersion); ok {
		r0 = rf(ctx, stateVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.StateVersion) error); ok {
		r1 = rf(ctx, stateVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersion provides a mock function with given fields: ctx, id
func (_m *MockStateVersions) GetStateVersion(ctx context.Context, id string) (*models.StateVersion, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersion")
	}

	var r0 *models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.StateVersion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.StateVersion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersions provides a mock function with given fields: ctx, input
func (_m *MockStateVersions) GetStateVersions(ctx context.Context, input *GetStateVersionsInput) (*StateVersionsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersions")
	}

	var r0 *StateVersionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetStateVersionsInput) (*StateVersionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetStateVersionsInput) *StateVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StateVersionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetStateVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockStateVersions creates a new instance of MockStateVersions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateVersions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateVersions {
	mock := &MockStateVersions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
