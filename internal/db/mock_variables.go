// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockVariables is an autogenerated mock type for the Variables type
type MockVariables struct {
	mock.Mock
}

// CreateVariable provides a mock function with given fields: ctx, input
func (_m *MockVariables) CreateVariable(ctx context.Context, input *models.Variable) (*models.Variable, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.Variable
	if rf, ok := ret.Get(0).(func(context.Context, *models.Variable) *models.Variable); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Variable) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVariables provides a mock function with given fields: ctx, namespacePath, variables
func (_m *MockVariables) CreateVariables(ctx context.Context, namespacePath string, variables []models.Variable) error {
	ret := _m.Called(ctx, namespacePath, variables)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.Variable) error); ok {
		r0 = rf(ctx, namespacePath, variables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVariable provides a mock function with given fields: ctx, variable
func (_m *MockVariables) DeleteVariable(ctx context.Context, variable *models.Variable) error {
	ret := _m.Called(ctx, variable)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Variable) error); ok {
		r0 = rf(ctx, variable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVariables provides a mock function with given fields: ctx, namespacePath, category
func (_m *MockVariables) DeleteVariables(ctx context.Context, namespacePath string, category models.VariableCategory) error {
	ret := _m.Called(ctx, namespacePath, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.VariableCategory) error); ok {
		r0 = rf(ctx, namespacePath, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVariableByID provides a mock function with given fields: ctx, id
func (_m *MockVariables) GetVariableByID(ctx context.Context, id string) (*models.Variable, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Variable
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Variable); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariables provides a mock function with given fields: ctx, input
func (_m *MockVariables) GetVariables(ctx context.Context, input *GetVariablesInput) (*VariableResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *VariableResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetVariablesInput) *VariableResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VariableResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetVariablesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVariable provides a mock function with given fields: ctx, variable
func (_m *MockVariables) UpdateVariable(ctx context.Context, variable *models.Variable) (*models.Variable, error) {
	ret := _m.Called(ctx, variable)

	var r0 *models.Variable
	if rf, ok := ret.Get(0).(func(context.Context, *models.Variable) *models.Variable); ok {
		r0 = rf(ctx, variable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Variable) error); ok {
		r1 = rf(ctx, variable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockVariables interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockVariables creates a new instance of MockVariables. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockVariables(t mockConstructorTestingTNewMockVariables) *MockVariables {
	mock := &MockVariables{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
