// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockAnnouncements is an autogenerated mock type for the Announcements type
type MockAnnouncements struct {
	mock.Mock
}

// CreateAnnouncement provides a mock function with given fields: ctx, announcement
func (_m *MockAnnouncements) CreateAnnouncement(ctx context.Context, announcement *models.Announcement) (*models.Announcement, error) {
	ret := _m.Called(ctx, announcement)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnnouncement")
	}

	var r0 *models.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Announcement) (*models.Announcement, error)); ok {
		return rf(ctx, announcement)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Announcement) *models.Announcement); ok {
		r0 = rf(ctx, announcement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Announcement) error); ok {
		r1 = rf(ctx, announcement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnnouncement provides a mock function with given fields: ctx, announcement
func (_m *MockAnnouncements) DeleteAnnouncement(ctx context.Context, announcement *models.Announcement) error {
	ret := _m.Called(ctx, announcement)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnnouncement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Announcement) error); ok {
		r0 = rf(ctx, announcement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAnnouncementByID provides a mock function with given fields: ctx, id
func (_m *MockAnnouncements) GetAnnouncementByID(ctx context.Context, id string) (*models.Announcement, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAnnouncementByID")
	}

	var r0 *models.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Announcement, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Announcement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncementByTRN provides a mock function with given fields: ctx, trn
func (_m *MockAnnouncements) GetAnnouncementByTRN(ctx context.Context, trn string) (*models.Announcement, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetAnnouncementByTRN")
	}

	var r0 *models.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Announcement, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Announcement); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncements provides a mock function with given fields: ctx, input
func (_m *MockAnnouncements) GetAnnouncements(ctx context.Context, input *GetAnnouncementsInput) (*AnnouncementsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetAnnouncements")
	}

	var r0 *AnnouncementsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetAnnouncementsInput) (*AnnouncementsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetAnnouncementsInput) *AnnouncementsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AnnouncementsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetAnnouncementsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnnouncement provides a mock function with given fields: ctx, announcement
func (_m *MockAnnouncements) UpdateAnnouncement(ctx context.Context, announcement *models.Announcement) (*models.Announcement, error) {
	ret := _m.Called(ctx, announcement)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnnouncement")
	}

	var r0 *models.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Announcement) (*models.Announcement, error)); ok {
		return rf(ctx, announcement)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Announcement) *models.Announcement); ok {
		r0 = rf(ctx, announcement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Announcement) error); ok {
		r1 = rf(ctx, announcement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAnnouncements creates a new instance of MockAnnouncements. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnnouncements(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnnouncements {
	mock := &MockAnnouncements{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
