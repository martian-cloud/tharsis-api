// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockGPGKeys is an autogenerated mock type for the GPGKeys type
type MockGPGKeys struct {
	mock.Mock
}

// CreateGPGKey provides a mock function with given fields: ctx, gpgKey
func (_m *MockGPGKeys) CreateGPGKey(ctx context.Context, gpgKey *models.GPGKey) (*models.GPGKey, error) {
	ret := _m.Called(ctx, gpgKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateGPGKey")
	}

	var r0 *models.GPGKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.GPGKey) (*models.GPGKey, error)); ok {
		return rf(ctx, gpgKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.GPGKey) *models.GPGKey); ok {
		r0 = rf(ctx, gpgKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GPGKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.GPGKey) error); ok {
		r1 = rf(ctx, gpgKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGPGKey provides a mock function with given fields: ctx, gpgKey
func (_m *MockGPGKeys) DeleteGPGKey(ctx context.Context, gpgKey *models.GPGKey) error {
	ret := _m.Called(ctx, gpgKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGPGKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.GPGKey) error); ok {
		r0 = rf(ctx, gpgKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGPGKeyByID provides a mock function with given fields: ctx, id
func (_m *MockGPGKeys) GetGPGKeyByID(ctx context.Context, id string) (*models.GPGKey, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGPGKeyByID")
	}

	var r0 *models.GPGKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.GPGKey, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.GPGKey); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GPGKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGPGKeyByTRN provides a mock function with given fields: ctx, trn
func (_m *MockGPGKeys) GetGPGKeyByTRN(ctx context.Context, trn string) (*models.GPGKey, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetGPGKeyByTRN")
	}

	var r0 *models.GPGKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.GPGKey, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.GPGKey); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GPGKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGPGKeys provides a mock function with given fields: ctx, input
func (_m *MockGPGKeys) GetGPGKeys(ctx context.Context, input *GetGPGKeysInput) (*GPGKeysResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetGPGKeys")
	}

	var r0 *GPGKeysResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetGPGKeysInput) (*GPGKeysResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetGPGKeysInput) *GPGKeysResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GPGKeysResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetGPGKeysInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGPGKeys creates a new instance of MockGPGKeys. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGPGKeys(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGPGKeys {
	mock := &MockGPGKeys{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
