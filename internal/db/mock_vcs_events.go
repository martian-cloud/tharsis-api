// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockVCSEvents is an autogenerated mock type for the VCSEvents type
type MockVCSEvents struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *MockVCSEvents) CreateEvent(ctx context.Context, event *models.VCSEvent) (*models.VCSEvent, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *models.VCSEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSEvent) (*models.VCSEvent, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSEvent) *models.VCSEvent); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.VCSEvent) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: ctx, id
func (_m *MockVCSEvents) GetEventByID(ctx context.Context, id string) (*models.VCSEvent, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 *models.VCSEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.VCSEvent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.VCSEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByTRN provides a mock function with given fields: ctx, trn
func (_m *MockVCSEvents) GetEventByTRN(ctx context.Context, trn string) (*models.VCSEvent, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByTRN")
	}

	var r0 *models.VCSEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.VCSEvent, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.VCSEvent); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx, input
func (_m *MockVCSEvents) GetEvents(ctx context.Context, input *GetVCSEventsInput) (*VCSEventsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 *VCSEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetVCSEventsInput) (*VCSEventsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetVCSEventsInput) *VCSEventsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VCSEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetVCSEventsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *MockVCSEvents) UpdateEvent(ctx context.Context, event *models.VCSEvent) (*models.VCSEvent, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *models.VCSEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSEvent) (*models.VCSEvent, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSEvent) *models.VCSEvent); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.VCSEvent) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockVCSEvents creates a new instance of MockVCSEvents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVCSEvents(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVCSEvents {
	mock := &MockVCSEvents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
