// Code generated by mockery v2.14.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockWorkspaces is an autogenerated mock type for the Workspaces type
type MockWorkspaces struct {
	mock.Mock
}

// CreateWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockWorkspaces) CreateWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	var r0 *models.Workspace
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockWorkspaces) DeleteWorkspace(ctx context.Context, workspace *models.Workspace) error {
	ret := _m.Called(ctx, workspace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) error); ok {
		r0 = rf(ctx, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkspaceByFullPath provides a mock function with given fields: ctx, path
func (_m *MockWorkspaces) GetWorkspaceByFullPath(ctx context.Context, path string) (*models.Workspace, error) {
	ret := _m.Called(ctx, path)

	var r0 *models.Workspace
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Workspace); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceByID provides a mock function with given fields: ctx, id
func (_m *MockWorkspaces) GetWorkspaceByID(ctx context.Context, id string) (*models.Workspace, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Workspace
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Workspace); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaces provides a mock function with given fields: ctx, input
func (_m *MockWorkspaces) GetWorkspaces(ctx context.Context, input *GetWorkspacesInput) (*WorkspacesResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *WorkspacesResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetWorkspacesInput) *WorkspacesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspacesResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetWorkspacesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspacesForManagedIdentity provides a mock function with given fields: ctx, managedIdentityID
func (_m *MockWorkspaces) GetWorkspacesForManagedIdentity(ctx context.Context, managedIdentityID string) ([]models.Workspace, error) {
	ret := _m.Called(ctx, managedIdentityID)

	var r0 []models.Workspace
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Workspace); ok {
		r0 = rf(ctx, managedIdentityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, managedIdentityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockWorkspaces) UpdateWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	var r0 *models.Workspace
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockWorkspaces interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWorkspaces creates a new instance of MockWorkspaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWorkspaces(t mockConstructorTestingTNewMockWorkspaces) *MockWorkspaces {
	mock := &MockWorkspaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
