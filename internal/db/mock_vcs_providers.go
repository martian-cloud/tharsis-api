// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockVCSProviders is an autogenerated mock type for the VCSProviders type
type MockVCSProviders struct {
	mock.Mock
}

// CreateProvider provides a mock function with given fields: ctx, provider
func (_m *MockVCSProviders) CreateProvider(ctx context.Context, provider *models.VCSProvider) (*models.VCSProvider, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 *models.VCSProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSProvider) (*models.VCSProvider, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSProvider) *models.VCSProvider); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.VCSProvider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvider provides a mock function with given fields: ctx, provider
func (_m *MockVCSProviders) DeleteProvider(ctx context.Context, provider *models.VCSProvider) error {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSProvider) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProviderByID provides a mock function with given fields: ctx, id
func (_m *MockVCSProviders) GetProviderByID(ctx context.Context, id string) (*models.VCSProvider, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByID")
	}

	var r0 *models.VCSProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.VCSProvider, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.VCSProvider); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderByOAuthState provides a mock function with given fields: ctx, state
func (_m *MockVCSProviders) GetProviderByOAuthState(ctx context.Context, state string) (*models.VCSProvider, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByOAuthState")
	}

	var r0 *models.VCSProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.VCSProvider, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.VCSProvider); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderByTRN provides a mock function with given fields: ctx, trn
func (_m *MockVCSProviders) GetProviderByTRN(ctx context.Context, trn string) (*models.VCSProvider, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByTRN")
	}

	var r0 *models.VCSProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.VCSProvider, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.VCSProvider); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviders provides a mock function with given fields: ctx, input
func (_m *MockVCSProviders) GetProviders(ctx context.Context, input *GetVCSProvidersInput) (*VCSProvidersResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 *VCSProvidersResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetVCSProvidersInput) (*VCSProvidersResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetVCSProvidersInput) *VCSProvidersResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VCSProvidersResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetVCSProvidersInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvider provides a mock function with given fields: ctx, provider
func (_m *MockVCSProviders) UpdateProvider(ctx context.Context, provider *models.VCSProvider) (*models.VCSProvider, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *models.VCSProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSProvider) (*models.VCSProvider, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.VCSProvider) *models.VCSProvider); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.VCSProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.VCSProvider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockVCSProviders creates a new instance of MockVCSProviders. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVCSProviders(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVCSProviders {
	mock := &MockVCSProviders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
