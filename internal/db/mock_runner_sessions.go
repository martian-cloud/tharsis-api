// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRunnerSessions is an autogenerated mock type for the RunnerSessions type
type MockRunnerSessions struct {
	mock.Mock
}

// CreateRunnerSession provides a mock function with given fields: ctx, session
func (_m *MockRunnerSessions) CreateRunnerSession(ctx context.Context, session *models.RunnerSession) (*models.RunnerSession, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateRunnerSession")
	}

	var r0 *models.RunnerSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RunnerSession) (*models.RunnerSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RunnerSession) *models.RunnerSession); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RunnerSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RunnerSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRunnerSession provides a mock function with given fields: ctx, session
func (_m *MockRunnerSessions) DeleteRunnerSession(ctx context.Context, session *models.RunnerSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRunnerSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RunnerSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRunnerSessionByID provides a mock function with given fields: ctx, id
func (_m *MockRunnerSessions) GetRunnerSessionByID(ctx context.Context, id string) (*models.RunnerSession, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerSessionByID")
	}

	var r0 *models.RunnerSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.RunnerSession, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.RunnerSession); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RunnerSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunnerSessionByTRN provides a mock function with given fields: ctx, trn
func (_m *MockRunnerSessions) GetRunnerSessionByTRN(ctx context.Context, trn string) (*models.RunnerSession, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerSessionByTRN")
	}

	var r0 *models.RunnerSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.RunnerSession, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.RunnerSession); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RunnerSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunnerSessions provides a mock function with given fields: ctx, input
func (_m *MockRunnerSessions) GetRunnerSessions(ctx context.Context, input *GetRunnerSessionsInput) (*RunnerSessionsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerSessions")
	}

	var r0 *RunnerSessionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunnerSessionsInput) (*RunnerSessionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunnerSessionsInput) *RunnerSessionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunnerSessionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetRunnerSessionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRunnerSession provides a mock function with given fields: ctx, session
func (_m *MockRunnerSessions) UpdateRunnerSession(ctx context.Context, session *models.RunnerSession) (*models.RunnerSession, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRunnerSession")
	}

	var r0 *models.RunnerSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RunnerSession) (*models.RunnerSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RunnerSession) *models.RunnerSession); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RunnerSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RunnerSession) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRunnerSessions creates a new instance of MockRunnerSessions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunnerSessions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunnerSessions {
	mock := &MockRunnerSessions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
