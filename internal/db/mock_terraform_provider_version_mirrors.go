// Code generated by mockery v2.20.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformProviderVersionMirrors is an autogenerated mock type for the TerraformProviderVersionMirrors type
type MockTerraformProviderVersionMirrors struct {
	mock.Mock
}

// CreateVersionMirror provides a mock function with given fields: ctx, versionMirror
func (_m *MockTerraformProviderVersionMirrors) CreateVersionMirror(ctx context.Context, versionMirror *models.TerraformProviderVersionMirror) (*models.TerraformProviderVersionMirror, error) {
	ret := _m.Called(ctx, versionMirror)

	var r0 *models.TerraformProviderVersionMirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersionMirror) (*models.TerraformProviderVersionMirror, error)); ok {
		return rf(ctx, versionMirror)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersionMirror) *models.TerraformProviderVersionMirror); ok {
		r0 = rf(ctx, versionMirror)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderVersionMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersionMirror) error); ok {
		r1 = rf(ctx, versionMirror)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVersionMirror provides a mock function with given fields: ctx, versionMirror
func (_m *MockTerraformProviderVersionMirrors) DeleteVersionMirror(ctx context.Context, versionMirror *models.TerraformProviderVersionMirror) error {
	ret := _m.Called(ctx, versionMirror)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersionMirror) error); ok {
		r0 = rf(ctx, versionMirror)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVersionMirrorByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformProviderVersionMirrors) GetVersionMirrorByID(ctx context.Context, id string) (*models.TerraformProviderVersionMirror, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformProviderVersionMirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformProviderVersionMirror, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformProviderVersionMirror); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderVersionMirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionMirrors provides a mock function with given fields: ctx, input
func (_m *MockTerraformProviderVersionMirrors) GetVersionMirrors(ctx context.Context, input *GetProviderVersionMirrorsInput) (*ProviderVersionMirrorsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ProviderVersionMirrorsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetProviderVersionMirrorsInput) (*ProviderVersionMirrorsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetProviderVersionMirrorsInput) *ProviderVersionMirrorsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProviderVersionMirrorsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetProviderVersionMirrorsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTerraformProviderVersionMirrors interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTerraformProviderVersionMirrors creates a new instance of MockTerraformProviderVersionMirrors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerraformProviderVersionMirrors(t mockConstructorTestingTNewMockTerraformProviderVersionMirrors) *MockTerraformProviderVersionMirrors {
	mock := &MockTerraformProviderVersionMirrors{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
