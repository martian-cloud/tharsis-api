// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockWorkspaceAssessments is an autogenerated mock type for the WorkspaceAssessments type
type MockWorkspaceAssessments struct {
	mock.Mock
}

// CreateWorkspaceAssessment provides a mock function with given fields: ctx, assessment
func (_m *MockWorkspaceAssessments) CreateWorkspaceAssessment(ctx context.Context, assessment *models.WorkspaceAssessment) (*models.WorkspaceAssessment, error) {
	ret := _m.Called(ctx, assessment)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceAssessment")
	}

	var r0 *models.WorkspaceAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceAssessment) (*models.WorkspaceAssessment, error)); ok {
		return rf(ctx, assessment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceAssessment) *models.WorkspaceAssessment); ok {
		r0 = rf(ctx, assessment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkspaceAssessment) error); ok {
		r1 = rf(ctx, assessment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceAssessment provides a mock function with given fields: ctx, assessment
func (_m *MockWorkspaceAssessments) DeleteWorkspaceAssessment(ctx context.Context, assessment *models.WorkspaceAssessment) error {
	ret := _m.Called(ctx, assessment)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceAssessment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceAssessment) error); ok {
		r0 = rf(ctx, assessment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkspaceAssessmentByID provides a mock function with given fields: ctx, id
func (_m *MockWorkspaceAssessments) GetWorkspaceAssessmentByID(ctx context.Context, id string) (*models.WorkspaceAssessment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAssessmentByID")
	}

	var r0 *models.WorkspaceAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.WorkspaceAssessment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.WorkspaceAssessment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceAssessmentByWorkspaceID provides a mock function with given fields: ctx, workspaceID
func (_m *MockWorkspaceAssessments) GetWorkspaceAssessmentByWorkspaceID(ctx context.Context, workspaceID string) (*models.WorkspaceAssessment, error) {
	ret := _m.Called(ctx, workspaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAssessmentByWorkspaceID")
	}

	var r0 *models.WorkspaceAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.WorkspaceAssessment, error)); ok {
		return rf(ctx, workspaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.WorkspaceAssessment); ok {
		r0 = rf(ctx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceAssessments provides a mock function with given fields: ctx, input
func (_m *MockWorkspaceAssessments) GetWorkspaceAssessments(ctx context.Context, input *GetWorkspaceAssessmentsInput) (*WorkspaceAssessmentsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceAssessments")
	}

	var r0 *WorkspaceAssessmentsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetWorkspaceAssessmentsInput) (*WorkspaceAssessmentsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetWorkspaceAssessmentsInput) *WorkspaceAssessmentsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WorkspaceAssessmentsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetWorkspaceAssessmentsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceAssessment provides a mock function with given fields: ctx, assessment
func (_m *MockWorkspaceAssessments) UpdateWorkspaceAssessment(ctx context.Context, assessment *models.WorkspaceAssessment) (*models.WorkspaceAssessment, error) {
	ret := _m.Called(ctx, assessment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceAssessment")
	}

	var r0 *models.WorkspaceAssessment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceAssessment) (*models.WorkspaceAssessment, error)); ok {
		return rf(ctx, assessment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceAssessment) *models.WorkspaceAssessment); ok {
		r0 = rf(ctx, assessment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceAssessment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkspaceAssessment) error); ok {
		r1 = rf(ctx, assessment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWorkspaceAssessments creates a new instance of MockWorkspaceAssessments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceAssessments(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceAssessments {
	mock := &MockWorkspaceAssessments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
