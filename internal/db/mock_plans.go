// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockPlans is an autogenerated mock type for the Plans type
type MockPlans struct {
	mock.Mock
}

// CreatePlan provides a mock function with given fields: ctx, plan
func (_m *MockPlans) CreatePlan(ctx context.Context, plan *models.Plan) (*models.Plan, error) {
	ret := _m.Called(ctx, plan)

	var r0 *models.Plan
	if rf, ok := ret.Get(0).(func(context.Context, *models.Plan) *models.Plan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlan provides a mock function with given fields: ctx, id
func (_m *MockPlans) GetPlan(ctx context.Context, id string) (*models.Plan, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Plan
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Plan); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlans provides a mock function with given fields: ctx, input
func (_m *MockPlans) GetPlans(ctx context.Context, input *GetPlansInput) (*PlansResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *PlansResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetPlansInput) *PlansResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PlansResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetPlansInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlan provides a mock function with given fields: ctx, plan
func (_m *MockPlans) UpdatePlan(ctx context.Context, plan *models.Plan) (*models.Plan, error) {
	ret := _m.Called(ctx, plan)

	var r0 *models.Plan
	if rf, ok := ret.Get(0).(func(context.Context, *models.Plan) *models.Plan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPlans interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPlans creates a new instance of MockPlans. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPlans(t mockConstructorTestingTNewMockPlans) *MockPlans {
	mock := &MockPlans{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
