// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformProviders is an autogenerated mock type for the TerraformProviders type
type MockTerraformProviders struct {
	mock.Mock
}

// CreateProvider provides a mock function with given fields: ctx, provider
func (_m *MockTerraformProviders) CreateProvider(ctx context.Context, provider *models.TerraformProvider) (*models.TerraformProvider, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 *models.TerraformProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProvider) (*models.TerraformProvider, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProvider) *models.TerraformProvider); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvider provides a mock function with given fields: ctx, provider
func (_m *MockTerraformProviders) DeleteProvider(ctx context.Context, provider *models.TerraformProvider) error {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProvider) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProviderByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformProviders) GetProviderByID(ctx context.Context, id string) (*models.TerraformProvider, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByID")
	}

	var r0 *models.TerraformProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformProvider, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformProvider); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderByPath provides a mock function with given fields: ctx, path
func (_m *MockTerraformProviders) GetProviderByPath(ctx context.Context, path string) (*models.TerraformProvider, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByPath")
	}

	var r0 *models.TerraformProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformProvider, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformProvider); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviders provides a mock function with given fields: ctx, input
func (_m *MockTerraformProviders) GetProviders(ctx context.Context, input *GetProvidersInput) (*ProvidersResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 *ProvidersResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetProvidersInput) (*ProvidersResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetProvidersInput) *ProvidersResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProvidersResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetProvidersInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvider provides a mock function with given fields: ctx, provider
func (_m *MockTerraformProviders) UpdateProvider(ctx context.Context, provider *models.TerraformProvider) (*models.TerraformProvider, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *models.TerraformProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProvider) (*models.TerraformProvider, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProvider) *models.TerraformProvider); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTerraformProviders creates a new instance of MockTerraformProviders. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTerraformProviders(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTerraformProviders {
	mock := &MockTerraformProviders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
