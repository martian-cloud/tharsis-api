// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockConfigurationVersions is an autogenerated mock type for the ConfigurationVersions type
type MockConfigurationVersions struct {
	mock.Mock
}

// CreateConfigurationVersion provides a mock function with given fields: ctx, configurationVersion
func (_m *MockConfigurationVersions) CreateConfigurationVersion(ctx context.Context, configurationVersion models.ConfigurationVersion) (*models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, configurationVersion)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationVersion")
	}

	var r0 *models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ConfigurationVersion) (*models.ConfigurationVersion, error)); ok {
		return rf(ctx, configurationVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ConfigurationVersion) *models.ConfigurationVersion); ok {
		r0 = rf(ctx, configurationVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ConfigurationVersion) error); ok {
		r1 = rf(ctx, configurationVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationVersion provides a mock function with given fields: ctx, id
func (_m *MockConfigurationVersions) GetConfigurationVersion(ctx context.Context, id string) (*models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersion")
	}

	var r0 *models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.ConfigurationVersion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ConfigurationVersion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationVersions provides a mock function with given fields: ctx, input
func (_m *MockConfigurationVersions) GetConfigurationVersions(ctx context.Context, input *GetConfigurationVersionsInput) (*ConfigurationVersionsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersions")
	}

	var r0 *ConfigurationVersionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetConfigurationVersionsInput) (*ConfigurationVersionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetConfigurationVersionsInput) *ConfigurationVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigurationVersionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetConfigurationVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationVersion provides a mock function with given fields: ctx, configurationVersion
func (_m *MockConfigurationVersions) UpdateConfigurationVersion(ctx context.Context, configurationVersion models.ConfigurationVersion) (*models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, configurationVersion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationVersion")
	}

	var r0 *models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ConfigurationVersion) (*models.ConfigurationVersion, error)); ok {
		return rf(ctx, configurationVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ConfigurationVersion) *models.ConfigurationVersion); ok {
		r0 = rf(ctx, configurationVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ConfigurationVersion) error); ok {
		r1 = rf(ctx, configurationVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockConfigurationVersions creates a new instance of MockConfigurationVersions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationVersions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationVersions {
	mock := &MockConfigurationVersions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
