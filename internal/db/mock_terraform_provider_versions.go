// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformProviderVersions is an autogenerated mock type for the TerraformProviderVersions type
type MockTerraformProviderVersions struct {
	mock.Mock
}

// CreateProviderVersion provides a mock function with given fields: ctx, providerVersion
func (_m *MockTerraformProviderVersions) CreateProviderVersion(ctx context.Context, providerVersion *models.TerraformProviderVersion) (*models.TerraformProviderVersion, error) {
	ret := _m.Called(ctx, providerVersion)

	var r0 *models.TerraformProviderVersion
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion) *models.TerraformProviderVersion); ok {
		r0 = rf(ctx, providerVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersion) error); ok {
		r1 = rf(ctx, providerVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProviderVersion provides a mock function with given fields: ctx, providerVersion
func (_m *MockTerraformProviderVersions) DeleteProviderVersion(ctx context.Context, providerVersion *models.TerraformProviderVersion) error {
	ret := _m.Called(ctx, providerVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion) error); ok {
		r0 = rf(ctx, providerVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProviderVersionByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformProviderVersions) GetProviderVersionByID(ctx context.Context, id string) (*models.TerraformProviderVersion, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformProviderVersion
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformProviderVersion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderVersions provides a mock function with given fields: ctx, input
func (_m *MockTerraformProviderVersions) GetProviderVersions(ctx context.Context, input *GetProviderVersionsInput) (*ProviderVersionsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ProviderVersionsResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetProviderVersionsInput) *ProviderVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProviderVersionsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetProviderVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProviderVersion provides a mock function with given fields: ctx, providerVersion
func (_m *MockTerraformProviderVersions) UpdateProviderVersion(ctx context.Context, providerVersion *models.TerraformProviderVersion) (*models.TerraformProviderVersion, error) {
	ret := _m.Called(ctx, providerVersion)

	var r0 *models.TerraformProviderVersion
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion) *models.TerraformProviderVersion); ok {
		r0 = rf(ctx, providerVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersion) error); ok {
		r1 = rf(ctx, providerVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTerraformProviderVersions interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTerraformProviderVersions creates a new instance of MockTerraformProviderVersions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerraformProviderVersions(t mockConstructorTestingTNewMockTerraformProviderVersions) *MockTerraformProviderVersions {
	mock := &MockTerraformProviderVersions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
