// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRuns is an autogenerated mock type for the Runs type
type MockRuns struct {
	mock.Mock
}

// CreateRun provides a mock function with given fields: ctx, run
func (_m *MockRuns) CreateRun(ctx context.Context, run *models.Run) (*models.Run, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for CreateRun")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (*models.Run, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) *models.Run); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRun provides a mock function with given fields: ctx, id
func (_m *MockRuns) GetRun(ctx context.Context, id string) (*models.Run, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRun")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Run, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Run); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunByApplyID provides a mock function with given fields: ctx, applyID
func (_m *MockRuns) GetRunByApplyID(ctx context.Context, applyID string) (*models.Run, error) {
	ret := _m.Called(ctx, applyID)

	if len(ret) == 0 {
		panic("no return value specified for GetRunByApplyID")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Run, error)); ok {
		return rf(ctx, applyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Run); ok {
		r0 = rf(ctx, applyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, applyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunByPlanID provides a mock function with given fields: ctx, planID
func (_m *MockRuns) GetRunByPlanID(ctx context.Context, planID string) (*models.Run, error) {
	ret := _m.Called(ctx, planID)

	if len(ret) == 0 {
		panic("no return value specified for GetRunByPlanID")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Run, error)); ok {
		return rf(ctx, planID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Run); ok {
		r0 = rf(ctx, planID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, planID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuns provides a mock function with given fields: ctx, input
func (_m *MockRuns) GetRuns(ctx context.Context, input *GetRunsInput) (*RunsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetRuns")
	}

	var r0 *RunsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunsInput) (*RunsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetRunsInput) *RunsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetRunsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRun provides a mock function with given fields: ctx, run
func (_m *MockRuns) UpdateRun(ctx context.Context, run *models.Run) (*models.Run, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRun")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (*models.Run, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) *models.Run); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRuns creates a new instance of MockRuns. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuns(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuns {
	mock := &MockRuns{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
