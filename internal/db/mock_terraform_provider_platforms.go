// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformProviderPlatforms is an autogenerated mock type for the TerraformProviderPlatforms type
type MockTerraformProviderPlatforms struct {
	mock.Mock
}

// CreateProviderPlatform provides a mock function with given fields: ctx, providerPlatform
func (_m *MockTerraformProviderPlatforms) CreateProviderPlatform(ctx context.Context, providerPlatform *models.TerraformProviderPlatform) (*models.TerraformProviderPlatform, error) {
	ret := _m.Called(ctx, providerPlatform)

	if len(ret) == 0 {
		panic("no return value specified for CreateProviderPlatform")
	}

	var r0 *models.TerraformProviderPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform) (*models.TerraformProviderPlatform, error)); ok {
		return rf(ctx, providerPlatform)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform) *models.TerraformProviderPlatform); ok {
		r0 = rf(ctx, providerPlatform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderPlatform) error); ok {
		r1 = rf(ctx, providerPlatform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProviderPlatform provides a mock function with given fields: ctx, providerPlatform
func (_m *MockTerraformProviderPlatforms) DeleteProviderPlatform(ctx context.Context, providerPlatform *models.TerraformProviderPlatform) error {
	ret := _m.Called(ctx, providerPlatform)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProviderPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform) error); ok {
		r0 = rf(ctx, providerPlatform)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProviderPlatformByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformProviderPlatforms) GetProviderPlatformByID(ctx context.Context, id string) (*models.TerraformProviderPlatform, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderPlatformByID")
	}

	var r0 *models.TerraformProviderPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformProviderPlatform, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformProviderPlatform); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderPlatforms provides a mock function with given fields: ctx, input
func (_m *MockTerraformProviderPlatforms) GetProviderPlatforms(ctx context.Context, input *GetProviderPlatformsInput) (*ProviderPlatformsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderPlatforms")
	}

	var r0 *ProviderPlatformsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetProviderPlatformsInput) (*ProviderPlatformsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetProviderPlatformsInput) *ProviderPlatformsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProviderPlatformsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetProviderPlatformsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProviderPlatform provides a mock function with given fields: ctx, providerPlatform
func (_m *MockTerraformProviderPlatforms) UpdateProviderPlatform(ctx context.Context, providerPlatform *models.TerraformProviderPlatform) (*models.TerraformProviderPlatform, error) {
	ret := _m.Called(ctx, providerPlatform)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProviderPlatform")
	}

	var r0 *models.TerraformProviderPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform) (*models.TerraformProviderPlatform, error)); ok {
		return rf(ctx, providerPlatform)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform) *models.TerraformProviderPlatform); ok {
		r0 = rf(ctx, providerPlatform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformProviderPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderPlatform) error); ok {
		r1 = rf(ctx, providerPlatform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTerraformProviderPlatforms creates a new instance of MockTerraformProviderPlatforms. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTerraformProviderPlatforms(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTerraformProviderPlatforms {
	mock := &MockTerraformProviderPlatforms{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
