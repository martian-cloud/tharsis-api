// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformModuleAttestations is an autogenerated mock type for the TerraformModuleAttestations type
type MockTerraformModuleAttestations struct {
	mock.Mock
}

// CreateModuleAttestation provides a mock function with given fields: ctx, moduleAttestation
func (_m *MockTerraformModuleAttestations) CreateModuleAttestation(ctx context.Context, moduleAttestation *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, moduleAttestation)

	if len(ret) == 0 {
		panic("no return value specified for CreateModuleAttestation")
	}

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, moduleAttestation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, moduleAttestation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleAttestation) error); ok {
		r1 = rf(ctx, moduleAttestation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModuleAttestation provides a mock function with given fields: ctx, moduleAttestation
func (_m *MockTerraformModuleAttestations) DeleteModuleAttestation(ctx context.Context, moduleAttestation *models.TerraformModuleAttestation) error {
	ret := _m.Called(ctx, moduleAttestation)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModuleAttestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) error); ok {
		r0 = rf(ctx, moduleAttestation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModuleAttestationByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformModuleAttestations) GetModuleAttestationByID(ctx context.Context, id string) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAttestationByID")
	}

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleAttestationByTRN provides a mock function with given fields: ctx, trn
func (_m *MockTerraformModuleAttestations) GetModuleAttestationByTRN(ctx context.Context, trn string) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAttestationByTRN")
	}

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleAttestations provides a mock function with given fields: ctx, input
func (_m *MockTerraformModuleAttestations) GetModuleAttestations(ctx context.Context, input *GetModuleAttestationsInput) (*ModuleAttestationsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAttestations")
	}

	var r0 *ModuleAttestationsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) (*ModuleAttestationsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) *ModuleAttestationsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModuleAttestationsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleAttestationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModuleAttestation provides a mock function with given fields: ctx, moduleAttestation
func (_m *MockTerraformModuleAttestations) UpdateModuleAttestation(ctx context.Context, moduleAttestation *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, moduleAttestation)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModuleAttestation")
	}

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, moduleAttestation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, moduleAttestation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleAttestation) error); ok {
		r1 = rf(ctx, moduleAttestation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTerraformModuleAttestations creates a new instance of MockTerraformModuleAttestations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTerraformModuleAttestations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTerraformModuleAttestations {
	mock := &MockTerraformModuleAttestations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
