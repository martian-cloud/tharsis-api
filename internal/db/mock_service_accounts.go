// Code generated by mockery v2.14.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockServiceAccounts is an autogenerated mock type for the ServiceAccounts type
type MockServiceAccounts struct {
	mock.Mock
}

// CreateServiceAccount provides a mock function with given fields: ctx, serviceAccount
func (_m *MockServiceAccounts) CreateServiceAccount(ctx context.Context, serviceAccount *models.ServiceAccount) (*models.ServiceAccount, error) {
	ret := _m.Called(ctx, serviceAccount)

	var r0 *models.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, *models.ServiceAccount) *models.ServiceAccount); ok {
		r0 = rf(ctx, serviceAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ServiceAccount) error); ok {
		r1 = rf(ctx, serviceAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceAccount provides a mock function with given fields: ctx, serviceAccount
func (_m *MockServiceAccounts) DeleteServiceAccount(ctx context.Context, serviceAccount *models.ServiceAccount) error {
	ret := _m.Called(ctx, serviceAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ServiceAccount) error); ok {
		r0 = rf(ctx, serviceAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetServiceAccountByID provides a mock function with given fields: ctx, id
func (_m *MockServiceAccounts) GetServiceAccountByID(ctx context.Context, id string) (*models.ServiceAccount, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ServiceAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccountByPath provides a mock function with given fields: ctx, path
func (_m *MockServiceAccounts) GetServiceAccountByPath(ctx context.Context, path string) (*models.ServiceAccount, error) {
	ret := _m.Called(ctx, path)

	var r0 *models.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ServiceAccount); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAccounts provides a mock function with given fields: ctx, input
func (_m *MockServiceAccounts) GetServiceAccounts(ctx context.Context, input *GetServiceAccountsInput) (*ServiceAccountsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ServiceAccountsResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetServiceAccountsInput) *ServiceAccountsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccountsResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetServiceAccountsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceAccount provides a mock function with given fields: ctx, serviceAccount
func (_m *MockServiceAccounts) UpdateServiceAccount(ctx context.Context, serviceAccount *models.ServiceAccount) (*models.ServiceAccount, error) {
	ret := _m.Called(ctx, serviceAccount)

	var r0 *models.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, *models.ServiceAccount) *models.ServiceAccount); ok {
		r0 = rf(ctx, serviceAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ServiceAccount) error); ok {
		r1 = rf(ctx, serviceAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockServiceAccounts interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceAccounts creates a new instance of MockServiceAccounts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceAccounts(t mockConstructorTestingTNewMockServiceAccounts) *MockServiceAccounts {
	mock := &MockServiceAccounts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
