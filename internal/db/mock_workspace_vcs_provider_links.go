// Code generated by mockery v2.14.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockWorkspaceVCSProviderLinks is an autogenerated mock type for the WorkspaceVCSProviderLinks type
type MockWorkspaceVCSProviderLinks struct {
	mock.Mock
}

// CreateLink provides a mock function with given fields: ctx, link
func (_m *MockWorkspaceVCSProviderLinks) CreateLink(ctx context.Context, link *models.WorkspaceVCSProviderLink) (*models.WorkspaceVCSProviderLink, error) {
	ret := _m.Called(ctx, link)

	var r0 *models.WorkspaceVCSProviderLink
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceVCSProviderLink) *models.WorkspaceVCSProviderLink); ok {
		r0 = rf(ctx, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceVCSProviderLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkspaceVCSProviderLink) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLink provides a mock function with given fields: ctx, provider
func (_m *MockWorkspaceVCSProviderLinks) DeleteLink(ctx context.Context, provider *models.WorkspaceVCSProviderLink) error {
	ret := _m.Called(ctx, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceVCSProviderLink) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLinkByID provides a mock function with given fields: ctx, id
func (_m *MockWorkspaceVCSProviderLinks) GetLinkByID(ctx context.Context, id string) (*models.WorkspaceVCSProviderLink, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.WorkspaceVCSProviderLink
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.WorkspaceVCSProviderLink); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceVCSProviderLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkByWorkspaceID provides a mock function with given fields: ctx, workspaceID
func (_m *MockWorkspaceVCSProviderLinks) GetLinkByWorkspaceID(ctx context.Context, workspaceID string) (*models.WorkspaceVCSProviderLink, error) {
	ret := _m.Called(ctx, workspaceID)

	var r0 *models.WorkspaceVCSProviderLink
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.WorkspaceVCSProviderLink); ok {
		r0 = rf(ctx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceVCSProviderLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinksByProviderID provides a mock function with given fields: ctx, providerID
func (_m *MockWorkspaceVCSProviderLinks) GetLinksByProviderID(ctx context.Context, providerID string) ([]models.WorkspaceVCSProviderLink, error) {
	ret := _m.Called(ctx, providerID)

	var r0 []models.WorkspaceVCSProviderLink
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.WorkspaceVCSProviderLink); ok {
		r0 = rf(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WorkspaceVCSProviderLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLink provides a mock function with given fields: ctx, link
func (_m *MockWorkspaceVCSProviderLinks) UpdateLink(ctx context.Context, link *models.WorkspaceVCSProviderLink) (*models.WorkspaceVCSProviderLink, error) {
	ret := _m.Called(ctx, link)

	var r0 *models.WorkspaceVCSProviderLink
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkspaceVCSProviderLink) *models.WorkspaceVCSProviderLink); ok {
		r0 = rf(ctx, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceVCSProviderLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkspaceVCSProviderLink) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockWorkspaceVCSProviderLinks interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWorkspaceVCSProviderLinks creates a new instance of MockWorkspaceVCSProviderLinks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWorkspaceVCSProviderLinks(t mockConstructorTestingTNewMockWorkspaceVCSProviderLinks) *MockWorkspaceVCSProviderLinks {
	mock := &MockWorkspaceVCSProviderLinks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
