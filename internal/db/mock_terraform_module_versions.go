// Code generated by mockery v2.20.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockTerraformModuleVersions is an autogenerated mock type for the TerraformModuleVersions type
type MockTerraformModuleVersions struct {
	mock.Mock
}

// CreateModuleVersion provides a mock function with given fields: ctx, moduleVersion
func (_m *MockTerraformModuleVersions) CreateModuleVersion(ctx context.Context, moduleVersion *models.TerraformModuleVersion) (*models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, moduleVersion)

	var r0 *models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) (*models.TerraformModuleVersion, error)); ok {
		return rf(ctx, moduleVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) *models.TerraformModuleVersion); ok {
		r0 = rf(ctx, moduleVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion) error); ok {
		r1 = rf(ctx, moduleVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModuleVersion provides a mock function with given fields: ctx, moduleVersion
func (_m *MockTerraformModuleVersions) DeleteModuleVersion(ctx context.Context, moduleVersion *models.TerraformModuleVersion) error {
	ret := _m.Called(ctx, moduleVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) error); ok {
		r0 = rf(ctx, moduleVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModuleVersionByID provides a mock function with given fields: ctx, id
func (_m *MockTerraformModuleVersions) GetModuleVersionByID(ctx context.Context, id string) (*models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModuleVersion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModuleVersion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersions provides a mock function with given fields: ctx, input
func (_m *MockTerraformModuleVersions) GetModuleVersions(ctx context.Context, input *GetModuleVersionsInput) (*ModuleVersionsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *ModuleVersionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionsInput) (*ModuleVersionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionsInput) *ModuleVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModuleVersionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModuleVersion provides a mock function with given fields: ctx, moduleVersion
func (_m *MockTerraformModuleVersions) UpdateModuleVersion(ctx context.Context, moduleVersion *models.TerraformModuleVersion) (*models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, moduleVersion)

	var r0 *models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) (*models.TerraformModuleVersion, error)); ok {
		return rf(ctx, moduleVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) *models.TerraformModuleVersion); ok {
		r0 = rf(ctx, moduleVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion) error); ok {
		r1 = rf(ctx, moduleVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTerraformModuleVersions interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTerraformModuleVersions creates a new instance of MockTerraformModuleVersions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerraformModuleVersions(t mockConstructorTestingTNewMockTerraformModuleVersions) *MockTerraformModuleVersions {
	mock := &MockTerraformModuleVersions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
