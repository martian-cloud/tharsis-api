// Code generated by mockery v2.53.0. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockApplies is an autogenerated mock type for the Applies type
type MockApplies struct {
	mock.Mock
}

// CreateApply provides a mock function with given fields: ctx, apply
func (_m *MockApplies) CreateApply(ctx context.Context, apply *models.Apply) (*models.Apply, error) {
	ret := _m.Called(ctx, apply)

	if len(ret) == 0 {
		panic("no return value specified for CreateApply")
	}

	var r0 *models.Apply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) (*models.Apply, error)); ok {
		return rf(ctx, apply)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) *models.Apply); ok {
		r0 = rf(ctx, apply)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Apply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Apply) error); ok {
		r1 = rf(ctx, apply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplies provides a mock function with given fields: ctx, input
func (_m *MockApplies) GetApplies(ctx context.Context, input *GetAppliesInput) (*AppliesResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetApplies")
	}

	var r0 *AppliesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetAppliesInput) (*AppliesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetAppliesInput) *AppliesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AppliesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetAppliesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplyByID provides a mock function with given fields: ctx, id
func (_m *MockApplies) GetApplyByID(ctx context.Context, id string) (*models.Apply, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetApplyByID")
	}

	var r0 *models.Apply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Apply, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Apply); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Apply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplyByTRN provides a mock function with given fields: ctx, trn
func (_m *MockApplies) GetApplyByTRN(ctx context.Context, trn string) (*models.Apply, error) {
	ret := _m.Called(ctx, trn)

	if len(ret) == 0 {
		panic("no return value specified for GetApplyByTRN")
	}

	var r0 *models.Apply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Apply, error)); ok {
		return rf(ctx, trn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Apply); ok {
		r0 = rf(ctx, trn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Apply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApply provides a mock function with given fields: ctx, apply
func (_m *MockApplies) UpdateApply(ctx context.Context, apply *models.Apply) (*models.Apply, error) {
	ret := _m.Called(ctx, apply)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApply")
	}

	var r0 *models.Apply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) (*models.Apply, error)); ok {
		return rf(ctx, apply)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) *models.Apply); ok {
		r0 = rf(ctx, apply)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Apply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Apply) error); ok {
		r1 = rf(ctx, apply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockApplies creates a new instance of MockApplies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplies(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplies {
	mock := &MockApplies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
