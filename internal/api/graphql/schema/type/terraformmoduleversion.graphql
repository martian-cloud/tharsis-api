enum TerraformModuleVersionSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TerraformModuleVersionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformModuleVersionEdge]
}

type TerraformModuleVersionEdge {
  cursor: String!
  node: TerraformModuleVersion
}

type CreateTerraformModuleVersionPayload {
  clientMutationId: String
  moduleVersion: TerraformModuleVersion
  problems: [Problem!]!
}

type DeleteTerraformModuleVersionPayload {
  clientMutationId: String
  moduleVersion: TerraformModuleVersion
  problems: [Problem!]!
}

type TerraformModuleConfigurationDetailsVariable {
   name: String!
   type: String!
   description: String!
   default: String
   required: Boolean!
   sensitive: Boolean!
}

type TerraformModuleConfigurationDetailsOutput {
   name: String!
   description: String!
   sensitive: Boolean!
}

type TerraformModuleConfigurationDetailsProviderRef {
   name: String!
   alias: String!
}

type TerraformModuleConfigurationDetailsProviderRequirement {
   source: String!
   versionConstraints: [String!]!
   configurationAliases: [TerraformModuleConfigurationDetailsProviderRef!]!
}

type TerraformModuleConfigurationDetailsResource {
   mode: String!
   name: String!
   type: String!
   provider: TerraformModuleConfigurationDetailsProviderRef!
}

type TerraformModuleConfigurationDetailsModuleCall {
   name: String!
   source: String!
   version: String!
}

type TerraformModuleConfigurationDetails {
   path: String!
   readme: String!
   requiredCore: [String!]!
   variables: [TerraformModuleConfigurationDetailsVariable!]!
   outputs: [TerraformModuleConfigurationDetailsOutput!]!
   requiredProviders: [TerraformModuleConfigurationDetailsProviderRequirement!]!
   providerConfigs: [TerraformModuleConfigurationDetailsProviderRef!]!
   managedResources: [TerraformModuleConfigurationDetailsResource!]!
   dataResources: [TerraformModuleConfigurationDetailsResource!]!
   moduleCalls: [TerraformModuleConfigurationDetailsModuleCall!]!
}

type TerraformModuleVersion implements Node {
  id: ID!
  metadata: ResourceMetadata!
  module: TerraformModule!
  version: String!
  status: String!
  error: String!
  diagnostics: String!
  shaSum: String!
  latest: Boolean!
  createdBy: String!
  submodules: [String!]!
  examples: [String!]!
  configurationDetails(path: String!): TerraformModuleConfigurationDetails
  attestations(after: String, before: String, first: Int, last: Int, sort: TerraformModuleAttestationSort): TerraformModuleAttestationConnection!
}

input CreateTerraformModuleVersionInput {
  clientMutationId: String
  modulePath: String!
  version: String!
  shaSum: String!
}

input DeleteTerraformModuleVersionInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}
