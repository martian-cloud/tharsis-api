enum UserSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  cursor: String!
  node: User
}

type UpdateUserAdminStatusPayload {
  clientMutationId: String
  user: User
  problems: [Problem!]!
}

type RevokeUserSessionPayload {
  clientMutationId: String
  problems: [Problem!]!
}

type CreateUserPayload {
  clientMutationId: String
  user: User
  problems: [Problem!]!
}

type DeleteUserPayload {
  clientMutationId: String
  problems: [Problem!]!
}

type SetUserPasswordPayload {
  clientMutationId: String
  user: User
  problems: [Problem!]!
}

type User implements Node {
  id: ID!
  metadata: ResourceMetadata!
  username: String!
  email: String!
  namespaceMemberships(
    after: String
    before: String
    first: Int
    last: Int
  ): NamespaceMembershipConnection!
  teams(
    after: String
    before: String
    first: Int
    last: Int
    sort: TeamSort
  ): TeamConnection!
  admin: Boolean!
  active: Boolean!
  scimExternalId: String
  activityEvents(
    after: String
    before: String
    first: Int
    last: Int
    namespacePath: String
    timeRangeStart: Time
    timeRangeEnd: Time
    actions: [ActivityEventAction!]
    targetTypes: [ActivityEventTargetType!]
    sort: ActivityEventSort
  ): ActivityEventConnection!
  userSessions(
    after: String
    before: String
    first: Int
    last: Int
    sort: UserSessionSort
  ): UserSessionConnection!
}

input UpdateUserAdminStatusInput {
  userId: String!
  admin: Boolean!
}

input RevokeUserSessionInput {
  userSessionId: String!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String
  admin: Boolean!
}

input DeleteUserInput {
  userId: String!
}

input SetUserPasswordInput {
  userId: String!
  currentPassword: String!
  newPassword: String!
}
