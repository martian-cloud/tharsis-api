type PageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

union MeResponse = User | ServiceAccount

# The Query type represents all of the entry points into the API.
type Query {
  me: MeResponse
  userPreferences: UserPreferences!
  node(id: String!): Node
  namespace(fullPath: String!): Namespace
  group(fullPath: String!): Group
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  groups(
    after: String
    before: String
    first: Int
    last: Int
    parentId: String
    parentPath: String
      @deprecated(
        reason: "Use parentId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    search: String
    sort: GroupSort
  ): GroupConnection!
  workspace(fullPath: String!): Workspace
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  workspaces(
    after: String
    before: String
    first: Int
    last: Int
    groupId: String
    groupPath: String
      @deprecated(
        reason: "Use groupId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    search: String
    sort: WorkspaceSort
  ): WorkspaceConnection!
  terraformProviders(
    after: String
    before: String
    first: Int
    last: Int
    search: String
    sort: TerraformProviderSort
  ): TerraformProviderConnection!
  terraformProvider(
    registryNamespace: String!
    providerName: String!
  ): TerraformProvider
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  terraformProviderVersion(
    registryNamespace: String!
    providerName: String!
    version: String
  ): TerraformProviderVersion
  terraformModules(
    after: String
    before: String
    first: Int
    last: Int
    search: String
    sort: TerraformModuleSort
  ): TerraformModuleConnection!
  terraformModule(
    registryNamespace: String!
    moduleName: String!
    system: String!
  ): TerraformModule
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  terraformModuleVersion(
    registryNamespace: String!
    moduleName: String!
    system: String!
    version: String
  ): TerraformModuleVersion
  run(id: String!): Run
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  runs(
    after: String
    before: String
    first: Int
    last: Int
    workspacePath: String
      @deprecated(
        reason: "Use workspaceId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    workspaceId: String
    sort: RunSort
    workspaceAssessment: Boolean
  ): RunConnection!
  namespaceVariableVersion(
    id: String!
    includeSensitiveValue: Boolean
  ): NamespaceVariableVersion
  job(id: String!): Job
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  jobs(
    after: String
    before: String
    first: Int
    last: Int
    workspaceId: String
    workspacePath: String
      @deprecated(
        reason: "Use workspaceId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    jobType: JobType
    jobStatus: JobStatus
    sort: JobSort
  ): JobConnection!
  managedIdentity(id: String, path: String): ManagedIdentity
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  serviceAccount(id: String!): ServiceAccount
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  users(
    after: String
    before: String
    first: Int
    last: Int
    search: String
    sort: UserSort
  ): UserConnection!
  configurationVersion(id: String!): ConfigurationVersion
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  team(name: String!): Team
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  teams(
    after: String
    before: String
    first: Int
    last: Int
    search: String
    sort: TeamSort
  ): TeamConnection!
  terraformCLIVersions: TerraformCLIVersions
  sharedRunners(
    after: String
    before: String
    first: Int
    last: Int
    sort: ServiceAccountSort
  ): RunnerConnection!
  # There is no query for an activity event by ID.
  activityEvents(
    after: String
    before: String
    first: Int
    last: Int
    userId: String
    serviceAccountId: String
    username: String
      @deprecated(
        reason: "Use userId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    serviceAccountPath: String
      @deprecated(
        reason: "Use serviceAccountId instead, which accepts a TRN (Tharsis Resource Name)"
      )
    namespacePath: String
    includeNested: Boolean
    timeRangeStart: Time
    timeRangeEnd: Time
    actions: [ActivityEventAction!]
    targetTypes: [ActivityEventTargetType!]
    sort: ActivityEventSort
  ): ActivityEventConnection!
  role(name: String!): Role
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  roles(
    after: String
    before: String
    first: Int
    last: Int
    search: String
    sort: RoleSort
  ): RoleConnection!
  availableRolePermissions: [String!]!
  authSettings: AuthSettings
  resourceLimits: [ResourceLimit!]!
  terraformProviderVersionMirror(
    registryNamespace: String!
    registryHostname: String!
    type: String!
    version: String!
    groupPath: String!
  ): TerraformProviderVersionMirror
    @deprecated(
      reason: "Use node query instead, which accepts a TRN (Tharsis Resource Name)"
    )
  maintenanceMode: MaintenanceMode
  announcements(
    after: String
    before: String
    first: Int
    last: Int
    sort: AnnouncementSort
    active: Boolean
  ): AnnouncementConnection!
  version: Version!
}
