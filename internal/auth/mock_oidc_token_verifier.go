// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"

	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockOIDCTokenVerifier is an autogenerated mock type for the OIDCTokenVerifier type
type MockOIDCTokenVerifier struct {
	mock.Mock
}

// VerifyToken provides a mock function with given fields: ctx, token, validationOptions
func (_m *MockOIDCTokenVerifier) VerifyToken(ctx context.Context, token string, validationOptions []jwt.ValidateOption) (jwt.Token, error) {
	ret := _m.Called(ctx, token, validationOptions)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []jwt.ValidateOption) (jwt.Token, error)); ok {
		return rf(ctx, token, validationOptions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []jwt.ValidateOption) jwt.Token); ok {
		r0 = rf(ctx, token, validationOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []jwt.ValidateOption) error); ok {
		r1 = rf(ctx, token, validationOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockOIDCTokenVerifier creates a new instance of MockOIDCTokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOIDCTokenVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOIDCTokenVerifier {
	mock := &MockOIDCTokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
