// Code generated by mockery v2.20.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockAuthorizer is an autogenerated mock type for the Authorizer type
type MockAuthorizer struct {
	mock.Mock
}

// GetRootNamespaces provides a mock function with given fields: ctx
func (_m *MockAuthorizer) GetRootNamespaces(ctx context.Context) ([]models.MembershipNamespace, error) {
	ret := _m.Called(ctx)

	var r0 []models.MembershipNamespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.MembershipNamespace, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.MembershipNamespace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MembershipNamespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequireAccessToGroup provides a mock function with given fields: ctx, groupID, accessLevel
func (_m *MockAuthorizer) RequireAccessToGroup(ctx context.Context, groupID string, accessLevel models.Role) error {
	ret := _m.Called(ctx, groupID, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, groupID, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToInheritedGroupResource provides a mock function with given fields: ctx, groupID
func (_m *MockAuthorizer) RequireAccessToInheritedGroupResource(ctx context.Context, groupID string) error {
	ret := _m.Called(ctx, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToInheritedNamespaceResource provides a mock function with given fields: ctx, namespace
func (_m *MockAuthorizer) RequireAccessToInheritedNamespaceResource(ctx context.Context, namespace string) error {
	ret := _m.Called(ctx, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToNamespace provides a mock function with given fields: ctx, namespacePath, accessLevel
func (_m *MockAuthorizer) RequireAccessToNamespace(ctx context.Context, namespacePath string, accessLevel models.Role) error {
	ret := _m.Called(ctx, namespacePath, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, namespacePath, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToWorkspace provides a mock function with given fields: ctx, workspaceID, accessLevel
func (_m *MockAuthorizer) RequireAccessToWorkspace(ctx context.Context, workspaceID string, accessLevel models.Role) error {
	ret := _m.Called(ctx, workspaceID, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, workspaceID, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToGroups provides a mock function with given fields: ctx, groups
func (_m *MockAuthorizer) RequireViewerAccessToGroups(ctx context.Context, groups []models.Group) error {
	ret := _m.Called(ctx, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Group) error); ok {
		r0 = rf(ctx, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToNamespaces provides a mock function with given fields: ctx, requiredNamespaces
func (_m *MockAuthorizer) RequireViewerAccessToNamespaces(ctx context.Context, requiredNamespaces []string) error {
	ret := _m.Called(ctx, requiredNamespaces)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, requiredNamespaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToWorkspaces provides a mock function with given fields: ctx, workspaces
func (_m *MockAuthorizer) RequireViewerAccessToWorkspaces(ctx context.Context, workspaces []models.Workspace) error {
	ret := _m.Called(ctx, workspaces)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workspace) error); ok {
		r0 = rf(ctx, workspaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockAuthorizer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthorizer creates a new instance of MockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthorizer(t mockConstructorTestingTNewMockAuthorizer) *MockAuthorizer {
	mock := &MockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
