// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"

	jwt "github.com/lestrrat-go/jwx/v2/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockSigningKeyManager is an autogenerated mock type for the SigningKeyManager type
type MockSigningKeyManager struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ctx, input
func (_m *MockSigningKeyManager) GenerateToken(ctx context.Context, input *TokenInput) ([]byte, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *TokenInput) ([]byte, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *TokenInput) []byte); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *TokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeys provides a mock function with given fields: ctx
func (_m *MockSigningKeyManager) GetKeys(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKeys")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, token, validateOptions
func (_m *MockSigningKeyManager) VerifyToken(ctx context.Context, token string, validateOptions ...jwt.ValidateOption) (*VerifyTokenOutput, error) {
	_va := make([]interface{}, len(validateOptions))
	for _i := range validateOptions {
		_va[_i] = validateOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, token)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *VerifyTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...jwt.ValidateOption) (*VerifyTokenOutput, error)); ok {
		return rf(ctx, token, validateOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...jwt.ValidateOption) *VerifyTokenOutput); ok {
		r0 = rf(ctx, token, validateOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VerifyTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...jwt.ValidateOption) error); ok {
		r1 = rf(ctx, token, validateOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSigningKeyManager creates a new instance of MockSigningKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigningKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigningKeyManager {
	mock := &MockSigningKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
