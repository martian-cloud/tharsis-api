// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserSessionManager is an autogenerated mock type for the UserSessionManager type
type MockUserSessionManager struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: ctx, token, userAgent
func (_m *MockUserSessionManager) CreateSession(ctx context.Context, token string, userAgent string) (*CreateSessionResponse, error) {
	ret := _m.Called(ctx, token, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *CreateSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*CreateSessionResponse, error)); ok {
		return rf(ctx, token, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *CreateSessionResponse); ok {
		r0 = rf(ctx, token, userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateSession provides a mock function with given fields: ctx, accessToken, refreshToken
func (_m *MockUserSessionManager) InvalidateSession(ctx context.Context, accessToken string, refreshToken string) error {
	ret := _m.Called(ctx, accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, accessToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSession provides a mock function with given fields: ctx, refreshToken
func (_m *MockUserSessionManager) RefreshSession(ctx context.Context, refreshToken string) (*RefreshSessionResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSession")
	}

	var r0 *RefreshSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*RefreshSessionResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *RefreshSessionResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RefreshSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyCSRFToken provides a mock function with given fields: ctx, requestSessionID, csrfToken
func (_m *MockUserSessionManager) VerifyCSRFToken(ctx context.Context, requestSessionID string, csrfToken string) error {
	ret := _m.Called(ctx, requestSessionID, csrfToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCSRFToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, requestSessionID, csrfToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUserSessionManager creates a new instance of MockUserSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSessionManager {
	mock := &MockUserSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
