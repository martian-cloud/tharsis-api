// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockUserSessionManager is an autogenerated mock type for the UserSessionManager type
type MockUserSessionManager struct {
	mock.Mock
}

// ClearUserSessionCookies provides a mock function with given fields: w
func (_m *MockUserSessionManager) ClearUserSessionCookies(w http.ResponseWriter) {
	_m.Called(w)
}

// CreateSession provides a mock function with given fields: ctx, input
func (_m *MockUserSessionManager) CreateSession(ctx context.Context, input *CreateSessionInput) (*CreateSessionResponse, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *CreateSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSessionInput) (*CreateSessionResponse, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSessionInput) *CreateSessionResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateSessionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeOAuthCodeForSessionToken provides a mock function with given fields: ctx, input
func (_m *MockUserSessionManager) ExchangeOAuthCodeForSessionToken(ctx context.Context, input *ExchangeOAuthCodeForSessionTokenInput) (*ExchangeOAuthCodeForSessionTokenResponse, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeOAuthCodeForSessionToken")
	}

	var r0 *ExchangeOAuthCodeForSessionTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ExchangeOAuthCodeForSessionTokenInput) (*ExchangeOAuthCodeForSessionTokenResponse, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ExchangeOAuthCodeForSessionTokenInput) *ExchangeOAuthCodeForSessionTokenResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ExchangeOAuthCodeForSessionTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ExchangeOAuthCodeForSessionTokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentSession provides a mock function with given fields: ctx
func (_m *MockUserSessionManager) GetCurrentSession(ctx context.Context) (*models.UserSession, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSession")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.UserSession, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.UserSession); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionAccessTokenCookieName provides a mock function with no fields
func (_m *MockUserSessionManager) GetUserSessionAccessTokenCookieName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionAccessTokenCookieName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserSessionCSRFTokenCookieName provides a mock function with no fields
func (_m *MockUserSessionManager) GetUserSessionCSRFTokenCookieName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionCSRFTokenCookieName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserSessionRefreshTokenCookieName provides a mock function with no fields
func (_m *MockUserSessionManager) GetUserSessionRefreshTokenCookieName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionRefreshTokenCookieName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InitiateSessionOauthCodeFlow provides a mock function with given fields: ctx, input
func (_m *MockUserSessionManager) InitiateSessionOauthCodeFlow(ctx context.Context, input *InitiateSessionOauthCodeFlowInput) (string, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for InitiateSessionOauthCodeFlow")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *InitiateSessionOauthCodeFlowInput) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *InitiateSessionOauthCodeFlowInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *InitiateSessionOauthCodeFlowInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateSession provides a mock function with given fields: ctx, accessToken, refreshToken
func (_m *MockUserSessionManager) InvalidateSession(ctx context.Context, accessToken string, refreshToken string) error {
	ret := _m.Called(ctx, accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, accessToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSession provides a mock function with given fields: ctx, refreshToken
func (_m *MockUserSessionManager) RefreshSession(ctx context.Context, refreshToken string) (*RefreshSessionResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSession")
	}

	var r0 *RefreshSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*RefreshSessionResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *RefreshSessionResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RefreshSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserSessionCookies provides a mock function with given fields: w, input
func (_m *MockUserSessionManager) SetUserSessionCookies(w http.ResponseWriter, input *SetUserSessionCookiesInput) {
	_m.Called(w, input)
}

// VerifyCSRFToken provides a mock function with given fields: ctx, requestSessionID, csrfToken
func (_m *MockUserSessionManager) VerifyCSRFToken(ctx context.Context, requestSessionID string, csrfToken string) error {
	ret := _m.Called(ctx, requestSessionID, csrfToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCSRFToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, requestSessionID, csrfToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockUserSessionManager creates a new instance of MockUserSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSessionManager {
	mock := &MockUserSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
