// Code generated by mockery v2.14.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockCaller is an autogenerated mock type for the Caller type
type MockCaller struct {
	mock.Mock
}

// GetNamespaceAccessPolicy provides a mock function with given fields: ctx
func (_m *MockCaller) GetNamespaceAccessPolicy(ctx context.Context) (*NamespaceAccessPolicy, error) {
	ret := _m.Called(ctx)

	var r0 *NamespaceAccessPolicy
	if rf, ok := ret.Get(0).(func(context.Context) *NamespaceAccessPolicy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NamespaceAccessPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubject provides a mock function with given fields:
func (_m *MockCaller) GetSubject() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequireAccessToGroup provides a mock function with given fields: ctx, groupID, accessLevel
func (_m *MockCaller) RequireAccessToGroup(ctx context.Context, groupID string, accessLevel models.Role) error {
	ret := _m.Called(ctx, groupID, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, groupID, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToInheritedGroupResource provides a mock function with given fields: ctx, groupID
func (_m *MockCaller) RequireAccessToInheritedGroupResource(ctx context.Context, groupID string) error {
	ret := _m.Called(ctx, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToInheritedNamespaceResource provides a mock function with given fields: ctx, namespace
func (_m *MockCaller) RequireAccessToInheritedNamespaceResource(ctx context.Context, namespace string) error {
	ret := _m.Called(ctx, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToNamespace provides a mock function with given fields: ctx, namespacePath, accessLevel
func (_m *MockCaller) RequireAccessToNamespace(ctx context.Context, namespacePath string, accessLevel models.Role) error {
	ret := _m.Called(ctx, namespacePath, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, namespacePath, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireAccessToWorkspace provides a mock function with given fields: ctx, workspaceID, accessLevel
func (_m *MockCaller) RequireAccessToWorkspace(ctx context.Context, workspaceID string, accessLevel models.Role) error {
	ret := _m.Called(ctx, workspaceID, accessLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Role) error); ok {
		r0 = rf(ctx, workspaceID, accessLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireApplyWriteAccess provides a mock function with given fields: ctx, applyID
func (_m *MockCaller) RequireApplyWriteAccess(ctx context.Context, applyID string) error {
	ret := _m.Called(ctx, applyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, applyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireJobWriteAccess provides a mock function with given fields: ctx, jobID
func (_m *MockCaller) RequireJobWriteAccess(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequirePlanWriteAccess provides a mock function with given fields: ctx, planID
func (_m *MockCaller) RequirePlanWriteAccess(ctx context.Context, planID string) error {
	ret := _m.Called(ctx, planID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, planID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireRunWriteAccess provides a mock function with given fields: ctx, runID
func (_m *MockCaller) RequireRunWriteAccess(ctx context.Context, runID string) error {
	ret := _m.Called(ctx, runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireTeamCreateAccess provides a mock function with given fields: ctx
func (_m *MockCaller) RequireTeamCreateAccess(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireTeamDeleteAccess provides a mock function with given fields: ctx, teamID
func (_m *MockCaller) RequireTeamDeleteAccess(ctx context.Context, teamID string) error {
	ret := _m.Called(ctx, teamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireTeamUpdateAccess provides a mock function with given fields: ctx, teamID
func (_m *MockCaller) RequireTeamUpdateAccess(ctx context.Context, teamID string) error {
	ret := _m.Called(ctx, teamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireUserCreateAccess provides a mock function with given fields: ctx
func (_m *MockCaller) RequireUserCreateAccess(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireUserDeleteAccess provides a mock function with given fields: ctx, userID
func (_m *MockCaller) RequireUserDeleteAccess(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireUserUpdateAccess provides a mock function with given fields: ctx, userID
func (_m *MockCaller) RequireUserUpdateAccess(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToGroups provides a mock function with given fields: ctx, groups
func (_m *MockCaller) RequireViewerAccessToGroups(ctx context.Context, groups []models.Group) error {
	ret := _m.Called(ctx, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Group) error); ok {
		r0 = rf(ctx, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToNamespaces provides a mock function with given fields: ctx, namespaces
func (_m *MockCaller) RequireViewerAccessToNamespaces(ctx context.Context, namespaces []string) error {
	ret := _m.Called(ctx, namespaces)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, namespaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequireViewerAccessToWorkspaces provides a mock function with given fields: ctx, workspaces
func (_m *MockCaller) RequireViewerAccessToWorkspaces(ctx context.Context, workspaces []models.Workspace) error {
	ret := _m.Called(ctx, workspaces)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Workspace) error); ok {
		r0 = rf(ctx, workspaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCaller creates a new instance of MockCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCaller(t mockConstructorTestingTNewMockCaller) *MockCaller {
	mock := &MockCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
