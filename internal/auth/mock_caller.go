// Code generated by mockery v2.20.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	permissions "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/auth/permissions"
)

// MockCaller is an autogenerated mock type for the Caller type
type MockCaller struct {
	mock.Mock
}

// GetNamespaceAccessPolicy provides a mock function with given fields: ctx
func (_m *MockCaller) GetNamespaceAccessPolicy(ctx context.Context) (*NamespaceAccessPolicy, error) {
	ret := _m.Called(ctx)

	var r0 *NamespaceAccessPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*NamespaceAccessPolicy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *NamespaceAccessPolicy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NamespaceAccessPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubject provides a mock function with given fields:
func (_m *MockCaller) GetSubject() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsAdmin provides a mock function with given fields:
func (_m *MockCaller) IsAdmin() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequireAccessToInheritableResource provides a mock function with given fields: ctx, resourceType, checks
func (_m *MockCaller) RequireAccessToInheritableResource(ctx context.Context, resourceType permissions.ResourceType, checks ...func(*constraints)) error {
	_va := make([]interface{}, len(checks))
	for _i := range checks {
		_va[_i] = checks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resourceType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, permissions.ResourceType, ...func(*constraints)) error); ok {
		r0 = rf(ctx, resourceType, checks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequirePermission provides a mock function with given fields: ctx, perms, checks
func (_m *MockCaller) RequirePermission(ctx context.Context, perms permissions.Permission, checks ...func(*constraints)) error {
	_va := make([]interface{}, len(checks))
	for _i := range checks {
		_va[_i] = checks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, perms)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, permissions.Permission, ...func(*constraints)) error); ok {
		r0 = rf(ctx, perms, checks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCaller creates a new instance of MockCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCaller(t mockConstructorTestingTNewMockCaller) *MockCaller {
	mock := &MockCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
