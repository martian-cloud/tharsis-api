// Code generated by mockery v2.53.0. DO NOT EDIT.

package registry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockModuleRegistrySource is an autogenerated mock type for the ModuleRegistrySource type
type MockModuleRegistrySource struct {
	mock.Mock
}

// GetAttestations provides a mock function with given fields: ctx, semanticVersion, moduleDigest
func (_m *MockModuleRegistrySource) GetAttestations(ctx context.Context, semanticVersion string, moduleDigest string) ([]string, error) {
	ret := _m.Called(ctx, semanticVersion, moduleDigest)

	if len(ret) == 0 {
		panic("no return value specified for GetAttestations")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, semanticVersion, moduleDigest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, semanticVersion, moduleDigest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, semanticVersion, moduleDigest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Host provides a mock function with no fields
func (_m *MockModuleRegistrySource) Host() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsTharsisModule provides a mock function with no fields
func (_m *MockModuleRegistrySource) IsTharsisModule() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTharsisModule")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LocalRegistryModule provides a mock function with given fields: ctx
func (_m *MockModuleRegistrySource) LocalRegistryModule(ctx context.Context) (*models.TerraformModule, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LocalRegistryModule")
	}

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.TerraformModule, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.TerraformModule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with no fields
func (_m *MockModuleRegistrySource) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Namespace provides a mock function with no fields
func (_m *MockModuleRegistrySource) Namespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Namespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResolveDigest provides a mock function with given fields: ctx, version
func (_m *MockModuleRegistrySource) ResolveDigest(ctx context.Context, version string) ([]byte, error) {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for ResolveDigest")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSemanticVersion provides a mock function with given fields: ctx, wantVersion
func (_m *MockModuleRegistrySource) ResolveSemanticVersion(ctx context.Context, wantVersion *string) (string, error) {
	ret := _m.Called(ctx, wantVersion)

	if len(ret) == 0 {
		panic("no return value specified for ResolveSemanticVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (string, error)); ok {
		return rf(ctx, wantVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) string); ok {
		r0 = rf(ctx, wantVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, wantVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Source provides a mock function with no fields
func (_m *MockModuleRegistrySource) Source() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TargetSystem provides a mock function with no fields
func (_m *MockModuleRegistrySource) TargetSystem() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetSystem")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockModuleRegistrySource creates a new instance of MockModuleRegistrySource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModuleRegistrySource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModuleRegistrySource {
	mock := &MockModuleRegistrySource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
