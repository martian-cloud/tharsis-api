// Code generated by mockery v2.53.0. DO NOT EDIT.

package registry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-sdk-go/pkg/types"
)

// mockSdkClient is an autogenerated mock type for the sdkClient type
type mockSdkClient struct {
	mock.Mock
}

// GetModuleAttestations provides a mock function with given fields: ctx, input
func (_m *mockSdkClient) GetModuleAttestations(ctx context.Context, input *types.GetTerraformModuleAttestationsInput) (*types.GetTerraformModuleAttestationsOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAttestations")
	}

	var r0 *types.GetTerraformModuleAttestationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetTerraformModuleAttestationsInput) (*types.GetTerraformModuleAttestationsOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetTerraformModuleAttestationsInput) *types.GetTerraformModuleAttestationsOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetTerraformModuleAttestationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetTerraformModuleAttestationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersion provides a mock function with given fields: ctx, input
func (_m *mockSdkClient) GetModuleVersion(ctx context.Context, input *types.GetTerraformModuleVersionInput) (*types.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleVersion")
	}

	var r0 *types.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetTerraformModuleVersionInput) (*types.TerraformModuleVersion, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetTerraformModuleVersionInput) *types.TerraformModuleVersion); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetTerraformModuleVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockSdkClient creates a new instance of mockSdkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSdkClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSdkClient {
	mock := &mockSdkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
