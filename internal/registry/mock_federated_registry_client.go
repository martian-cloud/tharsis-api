// Code generated by mockery v2.53.0. DO NOT EDIT.

package registry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-sdk-go/pkg/types"
)

// MockFederatedRegistryClient is an autogenerated mock type for the FederatedRegistryClient type
type MockFederatedRegistryClient struct {
	mock.Mock
}

// GetModuleAttestations provides a mock function with given fields: ctx, input
func (_m *MockFederatedRegistryClient) GetModuleAttestations(ctx context.Context, input *GetModuleAttestationsInput) ([]*types.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAttestations")
	}

	var r0 []*types.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) ([]*types.TerraformModuleAttestation, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) []*types.TerraformModuleAttestation); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleAttestationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersion provides a mock function with given fields: ctx, input
func (_m *MockFederatedRegistryClient) GetModuleVersion(ctx context.Context, input *GetModuleVersionInput) (*types.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleVersion")
	}

	var r0 *types.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionInput) (*types.TerraformModuleVersion, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionInput) *types.TerraformModuleVersion); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFederatedRegistryClient creates a new instance of MockFederatedRegistryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFederatedRegistryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFederatedRegistryClient {
	mock := &MockFederatedRegistryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
