// Code generated by mockery v2.53.0. DO NOT EDIT.

package builder

import mock "github.com/stretchr/testify/mock"

// MockEmailBuilder is an autogenerated mock type for the EmailBuilder type
type MockEmailBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: templateCtx
func (_m *MockEmailBuilder) Build(templateCtx *TemplateContext) (string, error) {
	ret := _m.Called(templateCtx)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*TemplateContext) (string, error)); ok {
		return rf(templateCtx)
	}
	if rf, ok := ret.Get(0).(func(*TemplateContext) string); ok {
		r0 = rf(templateCtx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*TemplateContext) error); ok {
		r1 = rf(templateCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitFromData provides a mock function with given fields: data
func (_m *MockEmailBuilder) InitFromData(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InitFromData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with no fields
func (_m *MockEmailBuilder) Type() EmailType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 EmailType
	if rf, ok := ret.Get(0).(func() EmailType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(EmailType)
	}

	return r0
}

// NewMockEmailBuilder creates a new instance of MockEmailBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailBuilder {
	mock := &MockEmailBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
