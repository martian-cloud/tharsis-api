// Code generated by mockery v2.20.0. DO NOT EDIT.

package run

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockModuleResolver is an autogenerated mock type for the ModuleResolver type
type MockModuleResolver struct {
	mock.Mock
}

// ParseModuleRegistrySource provides a mock function with given fields: ctx, moduleSource
func (_m *MockModuleResolver) ParseModuleRegistrySource(ctx context.Context, moduleSource string) (*ModuleRegistrySource, error) {
	ret := _m.Called(ctx, moduleSource)

	var r0 *ModuleRegistrySource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ModuleRegistrySource, error)); ok {
		return rf(ctx, moduleSource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ModuleRegistrySource); ok {
		r0 = rf(ctx, moduleSource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModuleRegistrySource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, moduleSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveModuleVersion provides a mock function with given fields: ctx, source, wantVersion, variables
func (_m *MockModuleResolver) ResolveModuleVersion(ctx context.Context, source *ModuleRegistrySource, wantVersion *string, variables []Variable) (string, error) {
	ret := _m.Called(ctx, source, wantVersion, variables)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ModuleRegistrySource, *string, []Variable) (string, error)); ok {
		return rf(ctx, source, wantVersion, variables)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ModuleRegistrySource, *string, []Variable) string); ok {
		r0 = rf(ctx, source, wantVersion, variables)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ModuleRegistrySource, *string, []Variable) error); ok {
		r1 = rf(ctx, source, wantVersion, variables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockModuleResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockModuleResolver creates a new instance of MockModuleResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockModuleResolver(t mockConstructorTestingTNewMockModuleResolver) *MockModuleResolver {
	mock := &MockModuleResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
