// Code generated by mockery v2.53.0. DO NOT EDIT.

package state

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRunStateManager is an autogenerated mock type for the RunStateManager type
type MockRunStateManager struct {
	mock.Mock
}

// RegisterHandler provides a mock function with given fields: eventType, handler
func (_m *MockRunStateManager) RegisterHandler(eventType EventType, handler eventHandlerFunc) {
	_m.Called(eventType, handler)
}

// UpdateApply provides a mock function with given fields: ctx, apply
func (_m *MockRunStateManager) UpdateApply(ctx context.Context, apply *models.Apply) (*models.Apply, error) {
	ret := _m.Called(ctx, apply)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApply")
	}

	var r0 *models.Apply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) (*models.Apply, error)); ok {
		return rf(ctx, apply)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Apply) *models.Apply); ok {
		r0 = rf(ctx, apply)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Apply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Apply) error); ok {
		r1 = rf(ctx, apply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJob provides a mock function with given fields: ctx, job
func (_m *MockRunStateManager) UpdateJob(ctx context.Context, job *models.Job) (*models.Job, error) {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Job) (*models.Job, error)); ok {
		return rf(ctx, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Job) *models.Job); ok {
		r0 = rf(ctx, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlan provides a mock function with given fields: ctx, plan
func (_m *MockRunStateManager) UpdatePlan(ctx context.Context, plan *models.Plan) (*models.Plan, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlan")
	}

	var r0 *models.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Plan) (*models.Plan, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Plan) *models.Plan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRun provides a mock function with given fields: ctx, run
func (_m *MockRunStateManager) UpdateRun(ctx context.Context, run *models.Run) (*models.Run, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRun")
	}

	var r0 *models.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (*models.Run, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) *models.Run); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRunStateManager creates a new instance of MockRunStateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunStateManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunStateManager {
	mock := &MockRunStateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
