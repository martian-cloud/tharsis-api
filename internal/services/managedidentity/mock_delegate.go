// Code generated by mockery v2.20.0. DO NOT EDIT.

package managedidentity

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockDelegate is an autogenerated mock type for the Delegate type
type MockDelegate struct {
	mock.Mock
}

// CreateCredentials provides a mock function with given fields: ctx, identity, job
func (_m *MockDelegate) CreateCredentials(ctx context.Context, identity *models.ManagedIdentity, job *models.Job) ([]byte, error) {
	ret := _m.Called(ctx, identity, job)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ManagedIdentity, *models.Job) ([]byte, error)); ok {
		return rf(ctx, identity, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ManagedIdentity, *models.Job) []byte); ok {
		r0 = rf(ctx, identity, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ManagedIdentity, *models.Job) error); ok {
		r1 = rf(ctx, identity, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetManagedIdentityData provides a mock function with given fields: ctx, managedIdentity, input
func (_m *MockDelegate) SetManagedIdentityData(ctx context.Context, managedIdentity *models.ManagedIdentity, input []byte) error {
	ret := _m.Called(ctx, managedIdentity, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ManagedIdentity, []byte) error); ok {
		r0 = rf(ctx, managedIdentity, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockDelegate interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDelegate creates a new instance of MockDelegate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDelegate(t mockConstructorTestingTNewMockDelegate) *MockDelegate {
	mock := &MockDelegate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
