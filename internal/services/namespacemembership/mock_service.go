// Code generated by mockery v2.14.1. DO NOT EDIT.

package namespacemembership

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/db"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateNamespaceMembership provides a mock function with given fields: ctx, input
func (_m *MockService) CreateNamespaceMembership(ctx context.Context, input *CreateNamespaceMembershipInput) (*models.NamespaceMembership, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.NamespaceMembership
	if rf, ok := ret.Get(0).(func(context.Context, *CreateNamespaceMembershipInput) *models.NamespaceMembership); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NamespaceMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateNamespaceMembershipInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespaceMembership provides a mock function with given fields: ctx, namespaceMembership
func (_m *MockService) DeleteNamespaceMembership(ctx context.Context, namespaceMembership *models.NamespaceMembership) error {
	ret := _m.Called(ctx, namespaceMembership)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NamespaceMembership) error); ok {
		r0 = rf(ctx, namespaceMembership)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNamespaceMembershipByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetNamespaceMembershipByID(ctx context.Context, id string) (*models.NamespaceMembership, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.NamespaceMembership
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.NamespaceMembership); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NamespaceMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespaceMembershipsByIDs provides a mock function with given fields: ctx, ids
func (_m *MockService) GetNamespaceMembershipsByIDs(ctx context.Context, ids []string) ([]models.NamespaceMembership, error) {
	ret := _m.Called(ctx, ids)

	var r0 []models.NamespaceMembership
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.NamespaceMembership); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.NamespaceMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespaceMembershipsForNamespace provides a mock function with given fields: ctx, namespacePath
func (_m *MockService) GetNamespaceMembershipsForNamespace(ctx context.Context, namespacePath string) ([]models.NamespaceMembership, error) {
	ret := _m.Called(ctx, namespacePath)

	var r0 []models.NamespaceMembership
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.NamespaceMembership); ok {
		r0 = rf(ctx, namespacePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.NamespaceMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespacePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespaceMembershipsForSubject provides a mock function with given fields: ctx, input
func (_m *MockService) GetNamespaceMembershipsForSubject(ctx context.Context, input *GetNamespaceMembershipsForSubjectInput) (*db.NamespaceMembershipResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *db.NamespaceMembershipResult
	if rf, ok := ret.Get(0).(func(context.Context, *GetNamespaceMembershipsForSubjectInput) *db.NamespaceMembershipResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.NamespaceMembershipResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetNamespaceMembershipsForSubjectInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespaceMembership provides a mock function with given fields: ctx, namespaceMembership
func (_m *MockService) UpdateNamespaceMembership(ctx context.Context, namespaceMembership *models.NamespaceMembership) (*models.NamespaceMembership, error) {
	ret := _m.Called(ctx, namespaceMembership)

	var r0 *models.NamespaceMembership
	if rf, ok := ret.Get(0).(func(context.Context, *models.NamespaceMembership) *models.NamespaceMembership); ok {
		r0 = rf(ctx, namespaceMembership)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NamespaceMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NamespaceMembership) error); ok {
		r1 = rf(ctx, namespaceMembership)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
