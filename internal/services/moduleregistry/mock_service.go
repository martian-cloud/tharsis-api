// Code generated by mockery v2.20.0. DO NOT EDIT.

package moduleregistry

import (
	context "context"
	io "io"

	db "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/db"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateModule provides a mock function with given fields: ctx, input
func (_m *MockService) CreateModule(ctx context.Context, input *CreateModuleInput) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleInput) (*models.TerraformModule, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleInput) *models.TerraformModule); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateModuleInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModuleAttestation provides a mock function with given fields: ctx, input
func (_m *MockService) CreateModuleAttestation(ctx context.Context, input *CreateModuleAttestationInput) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleAttestationInput) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleAttestationInput) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateModuleAttestationInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModuleVersion provides a mock function with given fields: ctx, input
func (_m *MockService) CreateModuleVersion(ctx context.Context, input *CreateModuleVersionInput) (*models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleVersionInput) (*models.TerraformModuleVersion, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateModuleVersionInput) *models.TerraformModuleVersion); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateModuleVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModule provides a mock function with given fields: ctx, module
func (_m *MockService) DeleteModule(ctx context.Context, module *models.TerraformModule) error {
	ret := _m.Called(ctx, module)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) error); ok {
		r0 = rf(ctx, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModuleAttestation provides a mock function with given fields: ctx, attestation
func (_m *MockService) DeleteModuleAttestation(ctx context.Context, attestation *models.TerraformModuleAttestation) error {
	ret := _m.Called(ctx, attestation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) error); ok {
		r0 = rf(ctx, attestation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModuleVersion provides a mock function with given fields: ctx, moduleVersion
func (_m *MockService) DeleteModuleVersion(ctx context.Context, moduleVersion *models.TerraformModuleVersion) error {
	ret := _m.Called(ctx, moduleVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) error); ok {
		r0 = rf(ctx, moduleVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModuleAttestationByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetModuleAttestationByID(ctx context.Context, id string) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleAttestations provides a mock function with given fields: ctx, input
func (_m *MockService) GetModuleAttestations(ctx context.Context, input *GetModuleAttestationsInput) (*db.ModuleAttestationsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *db.ModuleAttestationsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) (*db.ModuleAttestationsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleAttestationsInput) *db.ModuleAttestationsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ModuleAttestationsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleAttestationsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleByAddress provides a mock function with given fields: ctx, namespace, name, system
func (_m *MockService) GetModuleByAddress(ctx context.Context, namespace string, name string, system string) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, namespace, name, system)

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.TerraformModule, error)); ok {
		return rf(ctx, namespace, name, system)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.TerraformModule); ok {
		r0 = rf(ctx, namespace, name, system)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, system)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetModuleByID(ctx context.Context, id string) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModule); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleByPath provides a mock function with given fields: ctx, path
func (_m *MockService) GetModuleByPath(ctx context.Context, path string) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, path)

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModule, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModule); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleConfigurationDetails provides a mock function with given fields: ctx, moduleVersion, path
func (_m *MockService) GetModuleConfigurationDetails(ctx context.Context, moduleVersion *models.TerraformModuleVersion, path string) (*ModuleConfigurationDetails, error) {
	ret := _m.Called(ctx, moduleVersion, path)

	var r0 *ModuleConfigurationDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, string) (*ModuleConfigurationDetails, error)); ok {
		return rf(ctx, moduleVersion, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, string) *ModuleConfigurationDetails); ok {
		r0 = rf(ctx, moduleVersion, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModuleConfigurationDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion, string) error); ok {
		r1 = rf(ctx, moduleVersion, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersionByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetModuleVersionByID(ctx context.Context, id string) (*models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TerraformModuleVersion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TerraformModuleVersion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersionPackageDownloadURL provides a mock function with given fields: ctx, moduleVersion
func (_m *MockService) GetModuleVersionPackageDownloadURL(ctx context.Context, moduleVersion *models.TerraformModuleVersion) (string, error) {
	ret := _m.Called(ctx, moduleVersion)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) (string, error)); ok {
		return rf(ctx, moduleVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion) string); ok {
		r0 = rf(ctx, moduleVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion) error); ok {
		r1 = rf(ctx, moduleVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersions provides a mock function with given fields: ctx, input
func (_m *MockService) GetModuleVersions(ctx context.Context, input *GetModuleVersionsInput) (*db.ModuleVersionsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *db.ModuleVersionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionsInput) (*db.ModuleVersionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModuleVersionsInput) *db.ModuleVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ModuleVersionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModuleVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleVersionsByIDs provides a mock function with given fields: ctx, ids
func (_m *MockService) GetModuleVersionsByIDs(ctx context.Context, ids []string) ([]models.TerraformModuleVersion, error) {
	ret := _m.Called(ctx, ids)

	var r0 []models.TerraformModuleVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.TerraformModuleVersion, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.TerraformModuleVersion); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TerraformModuleVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModules provides a mock function with given fields: ctx, input
func (_m *MockService) GetModules(ctx context.Context, input *GetModulesInput) (*db.ModulesResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *db.ModulesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetModulesInput) (*db.ModulesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetModulesInput) *db.ModulesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ModulesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetModulesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModulesByIDs provides a mock function with given fields: ctx, ids
func (_m *MockService) GetModulesByIDs(ctx context.Context, ids []string) ([]models.TerraformModule, error) {
	ret := _m.Called(ctx, ids)

	var r0 []models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.TerraformModule, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.TerraformModule); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModule provides a mock function with given fields: ctx, module
func (_m *MockService) UpdateModule(ctx context.Context, module *models.TerraformModule) (*models.TerraformModule, error) {
	ret := _m.Called(ctx, module)

	var r0 *models.TerraformModule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) (*models.TerraformModule, error)); ok {
		return rf(ctx, module)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModule) *models.TerraformModule); ok {
		r0 = rf(ctx, module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModule) error); ok {
		r1 = rf(ctx, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModuleAttestation provides a mock function with given fields: ctx, attestation
func (_m *MockService) UpdateModuleAttestation(ctx context.Context, attestation *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error) {
	ret := _m.Called(ctx, attestation)

	var r0 *models.TerraformModuleAttestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) (*models.TerraformModuleAttestation, error)); ok {
		return rf(ctx, attestation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleAttestation) *models.TerraformModuleAttestation); ok {
		r0 = rf(ctx, attestation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TerraformModuleAttestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleAttestation) error); ok {
		r1 = rf(ctx, attestation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadModuleVersionPackage provides a mock function with given fields: ctx, moduleVersion, reader
func (_m *MockService) UploadModuleVersionPackage(ctx context.Context, moduleVersion *models.TerraformModuleVersion, reader io.Reader) error {
	ret := _m.Called(ctx, moduleVersion, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, io.Reader) error); ok {
		r0 = rf(ctx, moduleVersion, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
