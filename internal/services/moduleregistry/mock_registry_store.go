// Code generated by mockery v2.53.0. DO NOT EDIT.

package moduleregistry

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRegistryStore is an autogenerated mock type for the RegistryStore type
type MockRegistryStore struct {
	mock.Mock
}

// DownloadModulePackage provides a mock function with given fields: ctx, moduleVersion, module, writer
func (_m *MockRegistryStore) DownloadModulePackage(ctx context.Context, moduleVersion *models.TerraformModuleVersion, module *models.TerraformModule, writer io.WriterAt) error {
	ret := _m.Called(ctx, moduleVersion, module, writer)

	if len(ret) == 0 {
		panic("no return value specified for DownloadModulePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule, io.WriterAt) error); ok {
		r0 = rf(ctx, moduleVersion, module, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModuleConfigurationDetails provides a mock function with given fields: ctx, moduleVersion, module, path
func (_m *MockRegistryStore) GetModuleConfigurationDetails(ctx context.Context, moduleVersion *models.TerraformModuleVersion, module *models.TerraformModule, path string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, moduleVersion, module, path)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleConfigurationDetails")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule, string) (io.ReadCloser, error)); ok {
		return rf(ctx, moduleVersion, module, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule, string) io.ReadCloser); ok {
		r0 = rf(ctx, moduleVersion, module, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule, string) error); ok {
		r1 = rf(ctx, moduleVersion, module, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModulePackagePresignedURL provides a mock function with given fields: ctx, moduleVersion, module
func (_m *MockRegistryStore) GetModulePackagePresignedURL(ctx context.Context, moduleVersion *models.TerraformModuleVersion, module *models.TerraformModule) (string, error) {
	ret := _m.Called(ctx, moduleVersion, module)

	if len(ret) == 0 {
		panic("no return value specified for GetModulePackagePresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule) (string, error)); ok {
		return rf(ctx, moduleVersion, module)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule) string); ok {
		r0 = rf(ctx, moduleVersion, module)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule) error); ok {
		r1 = rf(ctx, moduleVersion, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadModuleConfigurationDetails provides a mock function with given fields: ctx, metadata, moduleVersion, module
func (_m *MockRegistryStore) UploadModuleConfigurationDetails(ctx context.Context, metadata *ModuleConfigurationDetails, moduleVersion *models.TerraformModuleVersion, module *models.TerraformModule) error {
	ret := _m.Called(ctx, metadata, moduleVersion, module)

	if len(ret) == 0 {
		panic("no return value specified for UploadModuleConfigurationDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ModuleConfigurationDetails, *models.TerraformModuleVersion, *models.TerraformModule) error); ok {
		r0 = rf(ctx, metadata, moduleVersion, module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadModulePackage provides a mock function with given fields: ctx, moduleVersion, module, body
func (_m *MockRegistryStore) UploadModulePackage(ctx context.Context, moduleVersion *models.TerraformModuleVersion, module *models.TerraformModule, body io.Reader) error {
	ret := _m.Called(ctx, moduleVersion, module, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadModulePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformModuleVersion, *models.TerraformModule, io.Reader) error); ok {
		r0 = rf(ctx, moduleVersion, module, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRegistryStore creates a new instance of MockRegistryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistryStore {
	mock := &MockRegistryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
