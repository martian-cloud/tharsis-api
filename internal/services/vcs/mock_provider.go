// Code generated by mockery v2.20.0. DO NOT EDIT.

package vcs

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"

	types "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/services/vcs/types"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// BuildOAuthAuthorizationURL provides a mock function with given fields: input
func (_m *MockProvider) BuildOAuthAuthorizationURL(input *types.BuildOAuthAuthorizationURLInput) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(*types.BuildOAuthAuthorizationURLInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BuildRepositoryURL provides a mock function with given fields: input
func (_m *MockProvider) BuildRepositoryURL(input *types.BuildRepositoryURLInput) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(*types.BuildRepositoryURLInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateAccessToken provides a mock function with given fields: ctx, input
func (_m *MockProvider) CreateAccessToken(ctx context.Context, input *types.CreateAccessTokenInput) (*types.AccessTokenPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *types.AccessTokenPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateAccessTokenInput) (*types.AccessTokenPayload, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateAccessTokenInput) *types.AccessTokenPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccessTokenPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateAccessTokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhook provides a mock function with given fields: ctx, input
func (_m *MockProvider) CreateWebhook(ctx context.Context, input *types.CreateWebhookInput) (*types.WebhookPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *types.WebhookPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateWebhookInput) (*types.WebhookPayload, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateWebhookInput) *types.WebhookPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.WebhookPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateWebhookInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultAPIHostname provides a mock function with given fields:
func (_m *MockProvider) DefaultAPIHostname() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeleteWebhook provides a mock function with given fields: ctx, input
func (_m *MockProvider) DeleteWebhook(ctx context.Context, input *types.DeleteWebhookInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeleteWebhookInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArchive provides a mock function with given fields: ctx, input
func (_m *MockProvider) GetArchive(ctx context.Context, input *types.GetArchiveInput) (*http.Response, error) {
	ret := _m.Called(ctx, input)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetArchiveInput) (*http.Response, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetArchiveInput) *http.Response); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetArchiveInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiff provides a mock function with given fields: ctx, input
func (_m *MockProvider) GetDiff(ctx context.Context, input *types.GetDiffInput) (*types.GetDiffsPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *types.GetDiffsPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetDiffInput) (*types.GetDiffsPayload, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetDiffInput) *types.GetDiffsPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetDiffsPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetDiffInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiffs provides a mock function with given fields: ctx, input
func (_m *MockProvider) GetDiffs(ctx context.Context, input *types.GetDiffsInput) (*types.GetDiffsPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *types.GetDiffsPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetDiffsInput) (*types.GetDiffsPayload, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetDiffsInput) *types.GetDiffsPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetDiffsPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetDiffsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, input
func (_m *MockProvider) GetProject(ctx context.Context, input *types.GetProjectInput) (*types.GetProjectPayload, error) {
	ret := _m.Called(ctx, input)

	var r0 *types.GetProjectPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetProjectInput) (*types.GetProjectPayload, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetProjectInput) *types.GetProjectPayload); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetProjectPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetProjectInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeRequestActionIsSupported provides a mock function with given fields: action
func (_m *MockProvider) MergeRequestActionIsSupported(action string) bool {
	ret := _m.Called(action)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TestConnection provides a mock function with given fields: ctx, input
func (_m *MockProvider) TestConnection(ctx context.Context, input *types.TestConnectionInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TestConnectionInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ToVCSEventType provides a mock function with given fields: input
func (_m *MockProvider) ToVCSEventType(input *types.ToVCSEventTypeInput) models.VCSEventType {
	ret := _m.Called(input)

	var r0 models.VCSEventType
	if rf, ok := ret.Get(0).(func(*types.ToVCSEventTypeInput) models.VCSEventType); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.VCSEventType)
	}

	return r0
}

type mockConstructorTestingTNewMockProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProvider(t mockConstructorTestingTNewMockProvider) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
