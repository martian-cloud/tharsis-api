// Code generated by mockery v2.53.0. DO NOT EDIT.

package workspace

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockArtifactStore is an autogenerated mock type for the ArtifactStore type
type MockArtifactStore struct {
	mock.Mock
}

// DownloadConfigurationVersion provides a mock function with given fields: ctx, configurationVersion, writer
func (_m *MockArtifactStore) DownloadConfigurationVersion(ctx context.Context, configurationVersion *models.ConfigurationVersion, writer io.WriterAt) error {
	ret := _m.Called(ctx, configurationVersion, writer)

	if len(ret) == 0 {
		panic("no return value specified for DownloadConfigurationVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ConfigurationVersion, io.WriterAt) error); ok {
		r0 = rf(ctx, configurationVersion, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadPlanCache provides a mock function with given fields: ctx, run, writer
func (_m *MockArtifactStore) DownloadPlanCache(ctx context.Context, run *models.Run, writer io.WriterAt) error {
	ret := _m.Called(ctx, run, writer)

	if len(ret) == 0 {
		panic("no return value specified for DownloadPlanCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, io.WriterAt) error); ok {
		r0 = rf(ctx, run, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadStateVersion provides a mock function with given fields: ctx, stateVersion, writer
func (_m *MockArtifactStore) DownloadStateVersion(ctx context.Context, stateVersion *models.StateVersion, writer io.WriterAt) error {
	ret := _m.Called(ctx, stateVersion, writer)

	if len(ret) == 0 {
		panic("no return value specified for DownloadStateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion, io.WriterAt) error); ok {
		r0 = rf(ctx, stateVersion, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigurationVersion provides a mock function with given fields: ctx, configurationVersion
func (_m *MockArtifactStore) GetConfigurationVersion(ctx context.Context, configurationVersion *models.ConfigurationVersion) (io.ReadCloser, error) {
	ret := _m.Called(ctx, configurationVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersion")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ConfigurationVersion) (io.ReadCloser, error)); ok {
		return rf(ctx, configurationVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ConfigurationVersion) io.ReadCloser); ok {
		r0 = rf(ctx, configurationVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ConfigurationVersion) error); ok {
		r1 = rf(ctx, configurationVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanCache provides a mock function with given fields: ctx, run
func (_m *MockArtifactStore) GetPlanCache(ctx context.Context, run *models.Run) (io.ReadCloser, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanCache")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (io.ReadCloser, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) io.ReadCloser); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanDiff provides a mock function with given fields: ctx, run
func (_m *MockArtifactStore) GetPlanDiff(ctx context.Context, run *models.Run) (io.ReadCloser, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanDiff")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (io.ReadCloser, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) io.ReadCloser); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanJSON provides a mock function with given fields: ctx, run
func (_m *MockArtifactStore) GetPlanJSON(ctx context.Context, run *models.Run) (io.ReadCloser, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanJSON")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (io.ReadCloser, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) io.ReadCloser); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunVariables provides a mock function with given fields: ctx, run
func (_m *MockArtifactStore) GetRunVariables(ctx context.Context, run *models.Run) (io.ReadCloser, error) {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for GetRunVariables")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (io.ReadCloser, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) io.ReadCloser); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersion provides a mock function with given fields: ctx, stateVersion
func (_m *MockArtifactStore) GetStateVersion(ctx context.Context, stateVersion *models.StateVersion) (io.ReadCloser, error) {
	ret := _m.Called(ctx, stateVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersion")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) (io.ReadCloser, error)); ok {
		return rf(ctx, stateVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) io.ReadCloser); ok {
		r0 = rf(ctx, stateVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.StateVersion) error); ok {
		r1 = rf(ctx, stateVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadConfigurationVersion provides a mock function with given fields: ctx, configurationVersion, body
func (_m *MockArtifactStore) UploadConfigurationVersion(ctx context.Context, configurationVersion *models.ConfigurationVersion, body io.Reader) error {
	ret := _m.Called(ctx, configurationVersion, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadConfigurationVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ConfigurationVersion, io.Reader) error); ok {
		r0 = rf(ctx, configurationVersion, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPlanCache provides a mock function with given fields: ctx, run, body
func (_m *MockArtifactStore) UploadPlanCache(ctx context.Context, run *models.Run, body io.Reader) error {
	ret := _m.Called(ctx, run, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadPlanCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, io.Reader) error); ok {
		r0 = rf(ctx, run, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPlanDiff provides a mock function with given fields: ctx, run, body
func (_m *MockArtifactStore) UploadPlanDiff(ctx context.Context, run *models.Run, body io.Reader) error {
	ret := _m.Called(ctx, run, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadPlanDiff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, io.Reader) error); ok {
		r0 = rf(ctx, run, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPlanJSON provides a mock function with given fields: ctx, run, body
func (_m *MockArtifactStore) UploadPlanJSON(ctx context.Context, run *models.Run, body io.Reader) error {
	ret := _m.Called(ctx, run, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadPlanJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, io.Reader) error); ok {
		r0 = rf(ctx, run, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadRunVariables provides a mock function with given fields: ctx, run, body
func (_m *MockArtifactStore) UploadRunVariables(ctx context.Context, run *models.Run, body io.Reader) error {
	ret := _m.Called(ctx, run, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadRunVariables")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, io.Reader) error); ok {
		r0 = rf(ctx, run, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadStateVersion provides a mock function with given fields: ctx, stateVersion, body
func (_m *MockArtifactStore) UploadStateVersion(ctx context.Context, stateVersion *models.StateVersion, body io.Reader) error {
	ret := _m.Called(ctx, stateVersion, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadStateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion, io.Reader) error); ok {
		r0 = rf(ctx, stateVersion, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockArtifactStore creates a new instance of MockArtifactStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtifactStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtifactStore {
	mock := &MockArtifactStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
