// Code generated by mockery v2.53.0. DO NOT EDIT.

package workspace

import (
	context "context"
	io "io"

	db "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/db"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateConfigurationVersion provides a mock function with given fields: ctx, options
func (_m *MockService) CreateConfigurationVersion(ctx context.Context, options *CreateConfigurationVersionInput) (*models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationVersion")
	}

	var r0 *models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateConfigurationVersionInput) (*models.ConfigurationVersion, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateConfigurationVersionInput) *models.ConfigurationVersion); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateConfigurationVersionInput) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStateVersion provides a mock function with given fields: ctx, stateVersion, data
func (_m *MockService) CreateStateVersion(ctx context.Context, stateVersion *models.StateVersion, data *string) (*models.StateVersion, error) {
	ret := _m.Called(ctx, stateVersion, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateStateVersion")
	}

	var r0 *models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion, *string) (*models.StateVersion, error)); ok {
		return rf(ctx, stateVersion, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion, *string) *models.StateVersion); ok {
		r0 = rf(ctx, stateVersion, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.StateVersion, *string) error); ok {
		r1 = rf(ctx, stateVersion, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockService) CreateWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspace")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) (*models.Workspace, error)); ok {
		return rf(ctx, workspace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspace provides a mock function with given fields: ctx, workspace, force
func (_m *MockService) DeleteWorkspace(ctx context.Context, workspace *models.Workspace, force bool) error {
	ret := _m.Called(ctx, workspace, force)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace, bool) error); ok {
		r0 = rf(ctx, workspace, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigurationVersion provides a mock function with given fields: ctx, configurationVersionID
func (_m *MockService) GetConfigurationVersion(ctx context.Context, configurationVersionID string) (*models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, configurationVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersion")
	}

	var r0 *models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.ConfigurationVersion, error)); ok {
		return rf(ctx, configurationVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ConfigurationVersion); ok {
		r0 = rf(ctx, configurationVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, configurationVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationVersionContent provides a mock function with given fields: ctx, configurationVersionID
func (_m *MockService) GetConfigurationVersionContent(ctx context.Context, configurationVersionID string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, configurationVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersionContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, configurationVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, configurationVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, configurationVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationVersionsByIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetConfigurationVersionsByIDs(ctx context.Context, idList []string) ([]models.ConfigurationVersion, error) {
	ret := _m.Called(ctx, idList)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationVersionsByIDs")
	}

	var r0 []models.ConfigurationVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.ConfigurationVersion, error)); ok {
		return rf(ctx, idList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.ConfigurationVersion); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConfigurationVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentStateVersion provides a mock function with given fields: ctx, workspaceID
func (_m *MockService) GetCurrentStateVersion(ctx context.Context, workspaceID string) (*models.StateVersion, error) {
	ret := _m.Called(ctx, workspaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentStateVersion")
	}

	var r0 *models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.StateVersion, error)); ok {
		return rf(ctx, workspaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.StateVersion); ok {
		r0 = rf(ctx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunnerTagsSetting provides a mock function with given fields: ctx, workspace
func (_m *MockService) GetRunnerTagsSetting(ctx context.Context, workspace *models.Workspace) (*models.RunnerTagsSetting, error) {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerTagsSetting")
	}

	var r0 *models.RunnerTagsSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) (*models.RunnerTagsSetting, error)); ok {
		return rf(ctx, workspace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.RunnerTagsSetting); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RunnerTagsSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersion provides a mock function with given fields: ctx, stateVersionID
func (_m *MockService) GetStateVersion(ctx context.Context, stateVersionID string) (*models.StateVersion, error) {
	ret := _m.Called(ctx, stateVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersion")
	}

	var r0 *models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.StateVersion, error)); ok {
		return rf(ctx, stateVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.StateVersion); ok {
		r0 = rf(ctx, stateVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersionContent provides a mock function with given fields: ctx, stateVersionID
func (_m *MockService) GetStateVersionContent(ctx context.Context, stateVersionID string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, stateVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersionContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, stateVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, stateVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersionDependencies provides a mock function with given fields: ctx, stateVersion
func (_m *MockService) GetStateVersionDependencies(ctx context.Context, stateVersion *models.StateVersion) ([]StateVersionDependency, error) {
	ret := _m.Called(ctx, stateVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersionDependencies")
	}

	var r0 []StateVersionDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) ([]StateVersionDependency, error)); ok {
		return rf(ctx, stateVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) []StateVersionDependency); ok {
		r0 = rf(ctx, stateVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StateVersionDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.StateVersion) error); ok {
		r1 = rf(ctx, stateVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersionOutputs provides a mock function with given fields: _a0, stateVersionID
func (_m *MockService) GetStateVersionOutputs(_a0 context.Context, stateVersionID string) ([]models.StateVersionOutput, error) {
	ret := _m.Called(_a0, stateVersionID)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersionOutputs")
	}

	var r0 []models.StateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.StateVersionOutput, error)); ok {
		return rf(_a0, stateVersionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.StateVersionOutput); ok {
		r0 = rf(_a0, stateVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, stateVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersionResources provides a mock function with given fields: ctx, stateVersion
func (_m *MockService) GetStateVersionResources(ctx context.Context, stateVersion *models.StateVersion) ([]StateVersionResource, error) {
	ret := _m.Called(ctx, stateVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersionResources")
	}

	var r0 []StateVersionResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) ([]StateVersionResource, error)); ok {
		return rf(ctx, stateVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.StateVersion) []StateVersionResource); ok {
		r0 = rf(ctx, stateVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StateVersionResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.StateVersion) error); ok {
		r1 = rf(ctx, stateVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersions provides a mock function with given fields: ctx, input
func (_m *MockService) GetStateVersions(ctx context.Context, input *GetStateVersionsInput) (*db.StateVersionsResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersions")
	}

	var r0 *db.StateVersionsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetStateVersionsInput) (*db.StateVersionsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetStateVersionsInput) *db.StateVersionsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.StateVersionsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetStateVersionsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateVersionsByIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetStateVersionsByIDs(ctx context.Context, idList []string) ([]models.StateVersion, error) {
	ret := _m.Called(ctx, idList)

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersionsByIDs")
	}

	var r0 []models.StateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.StateVersion, error)); ok {
		return rf(ctx, idList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.StateVersion); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceByFullPath provides a mock function with given fields: ctx, path
func (_m *MockService) GetWorkspaceByFullPath(ctx context.Context, path string) (*models.Workspace, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceByFullPath")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Workspace, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Workspace); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetWorkspaceByID(ctx context.Context, id string) (*models.Workspace, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceByID")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Workspace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Workspace); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaces provides a mock function with given fields: ctx, input
func (_m *MockService) GetWorkspaces(ctx context.Context, input *GetWorkspacesInput) (*db.WorkspacesResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaces")
	}

	var r0 *db.WorkspacesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetWorkspacesInput) (*db.WorkspacesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetWorkspacesInput) *db.WorkspacesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.WorkspacesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetWorkspacesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspacesByIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetWorkspacesByIDs(ctx context.Context, idList []string) ([]models.Workspace, error) {
	ret := _m.Called(ctx, idList)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspacesByIDs")
	}

	var r0 []models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.Workspace, error)); ok {
		return rf(ctx, idList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.Workspace); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockService) LockWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for LockWorkspace")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) (*models.Workspace, error)); ok {
		return rf(ctx, workspace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateWorkspace provides a mock function with given fields: ctx, workspaceID, newGroupID
func (_m *MockService) MigrateWorkspace(ctx context.Context, workspaceID string, newGroupID string) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspaceID, newGroupID)

	if len(ret) == 0 {
		panic("no return value specified for MigrateWorkspace")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Workspace, error)); ok {
		return rf(ctx, workspaceID, newGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Workspace); ok {
		r0 = rf(ctx, workspaceID, newGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workspaceID, newGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToWorkspaceEvents provides a mock function with given fields: ctx, options
func (_m *MockService) SubscribeToWorkspaceEvents(ctx context.Context, options *EventSubscriptionOptions) (<-chan *Event, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToWorkspaceEvents")
	}

	var r0 <-chan *Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *EventSubscriptionOptions) (<-chan *Event, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *EventSubscriptionOptions) <-chan *Event); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *EventSubscriptionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockService) UnlockWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for UnlockWorkspace")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) (*models.Workspace, error)); ok {
		return rf(ctx, workspace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockService) UpdateWorkspace(ctx context.Context, workspace *models.Workspace) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspace")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) (*models.Workspace, error)); ok {
		return rf(ctx, workspace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace) *models.Workspace); ok {
		r0 = rf(ctx, workspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Workspace) error); ok {
		r1 = rf(ctx, workspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadConfigurationVersion provides a mock function with given fields: ctx, configurationVersionID, reader
func (_m *MockService) UploadConfigurationVersion(ctx context.Context, configurationVersionID string, reader io.Reader) error {
	ret := _m.Called(ctx, configurationVersionID, reader)

	if len(ret) == 0 {
		panic("no return value specified for UploadConfigurationVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, configurationVersionID, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
