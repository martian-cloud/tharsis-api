// Code generated by mockery v2.53.0. DO NOT EDIT.

package providerregistry

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockRegistryStore is an autogenerated mock type for the RegistryStore type
type MockRegistryStore struct {
	mock.Mock
}

// GetProviderPlatformBinaryPresignedURL provides a mock function with given fields: ctx, providerPlatform, providerVersion, provider
func (_m *MockRegistryStore) GetProviderPlatformBinaryPresignedURL(ctx context.Context, providerPlatform *models.TerraformProviderPlatform, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider) (string, error) {
	ret := _m.Called(ctx, providerPlatform, providerVersion, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderPlatformBinaryPresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform, *models.TerraformProviderVersion, *models.TerraformProvider) (string, error)); ok {
		return rf(ctx, providerPlatform, providerVersion, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform, *models.TerraformProviderVersion, *models.TerraformProvider) string); ok {
		r0 = rf(ctx, providerPlatform, providerVersion, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderPlatform, *models.TerraformProviderVersion, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, providerPlatform, providerVersion, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderVersionReadme provides a mock function with given fields: ctx, providerVersion, provider
func (_m *MockRegistryStore) GetProviderVersionReadme(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider) (io.ReadCloser, error) {
	ret := _m.Called(ctx, providerVersion, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderVersionReadme")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) (io.ReadCloser, error)); ok {
		return rf(ctx, providerVersion, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) io.ReadCloser); ok {
		r0 = rf(ctx, providerVersion, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, providerVersion, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderVersionSHASumsPresignedURL provides a mock function with given fields: ctx, providerVersion, provider
func (_m *MockRegistryStore) GetProviderVersionSHASumsPresignedURL(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider) (string, error) {
	ret := _m.Called(ctx, providerVersion, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderVersionSHASumsPresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) (string, error)); ok {
		return rf(ctx, providerVersion, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) string); ok {
		r0 = rf(ctx, providerVersion, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, providerVersion, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderVersionSHASumsSignaturePresignedURL provides a mock function with given fields: ctx, providerVersion, provider
func (_m *MockRegistryStore) GetProviderVersionSHASumsSignaturePresignedURL(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider) (string, error) {
	ret := _m.Called(ctx, providerVersion, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderVersionSHASumsSignaturePresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) (string, error)); ok {
		return rf(ctx, providerVersion, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) string); ok {
		r0 = rf(ctx, providerVersion, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider) error); ok {
		r1 = rf(ctx, providerVersion, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProviderPlatformBinary provides a mock function with given fields: ctx, providerPlatform, providerVersion, provider, body
func (_m *MockRegistryStore) UploadProviderPlatformBinary(ctx context.Context, providerPlatform *models.TerraformProviderPlatform, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider, body io.Reader) error {
	ret := _m.Called(ctx, providerPlatform, providerVersion, provider, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadProviderPlatformBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderPlatform, *models.TerraformProviderVersion, *models.TerraformProvider, io.Reader) error); ok {
		r0 = rf(ctx, providerPlatform, providerVersion, provider, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadProviderVersionReadme provides a mock function with given fields: ctx, providerVersion, provider, body
func (_m *MockRegistryStore) UploadProviderVersionReadme(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider, body io.Reader) error {
	ret := _m.Called(ctx, providerVersion, provider, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadProviderVersionReadme")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider, io.Reader) error); ok {
		r0 = rf(ctx, providerVersion, provider, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadProviderVersionSHASums provides a mock function with given fields: ctx, providerVersion, provider, body
func (_m *MockRegistryStore) UploadProviderVersionSHASums(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider, body io.Reader) error {
	ret := _m.Called(ctx, providerVersion, provider, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadProviderVersionSHASums")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider, io.Reader) error); ok {
		r0 = rf(ctx, providerVersion, provider, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadProviderVersionSHASumsSignature provides a mock function with given fields: ctx, providerVersion, provider, body
func (_m *MockRegistryStore) UploadProviderVersionSHASumsSignature(ctx context.Context, providerVersion *models.TerraformProviderVersion, provider *models.TerraformProvider, body io.Reader) error {
	ret := _m.Called(ctx, providerVersion, provider, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadProviderVersionSHASumsSignature")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TerraformProviderVersion, *models.TerraformProvider, io.Reader) error); ok {
		r0 = rf(ctx, providerVersion, provider, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRegistryStore creates a new instance of MockRegistryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistryStore {
	mock := &MockRegistryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
