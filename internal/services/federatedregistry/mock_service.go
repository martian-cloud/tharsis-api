// Code generated by mockery v2.53.0. DO NOT EDIT.

package federatedregistry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/db"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockService) CreateFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for CreateFederatedRegistry")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, federatedRegistry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) *models.FederatedRegistry); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FederatedRegistry) error); ok {
		r1 = rf(ctx, federatedRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFederatedRegistryTokensForJob provides a mock function with given fields: ctx, jobID
func (_m *MockService) CreateFederatedRegistryTokensForJob(ctx context.Context, jobID string) ([]*Token, error) {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for CreateFederatedRegistryTokensForJob")
	}

	var r0 []*Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Token, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Token); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockService) DeleteFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) error {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFederatedRegistry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) error); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFederatedRegistries provides a mock function with given fields: ctx, input
func (_m *MockService) GetFederatedRegistries(ctx context.Context, input *GetFederatedRegistriesInput) (*db.FederatedRegistriesResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistries")
	}

	var r0 *db.FederatedRegistriesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetFederatedRegistriesInput) (*db.FederatedRegistriesResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetFederatedRegistriesInput) *db.FederatedRegistriesResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.FederatedRegistriesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetFederatedRegistriesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederatedRegistriesByIDs provides a mock function with given fields: ctx, ids
func (_m *MockService) GetFederatedRegistriesByIDs(ctx context.Context, ids []string) ([]*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistriesByIDs")
	}

	var r0 []*models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.FederatedRegistry, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.FederatedRegistry); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederatedRegistryByID provides a mock function with given fields: ctx, id
func (_m *MockService) GetFederatedRegistryByID(ctx context.Context, id string) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFederatedRegistryByID")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.FederatedRegistry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFederatedRegistry provides a mock function with given fields: ctx, federatedRegistry
func (_m *MockService) UpdateFederatedRegistry(ctx context.Context, federatedRegistry *models.FederatedRegistry) (*models.FederatedRegistry, error) {
	ret := _m.Called(ctx, federatedRegistry)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFederatedRegistry")
	}

	var r0 *models.FederatedRegistry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) (*models.FederatedRegistry, error)); ok {
		return rf(ctx, federatedRegistry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.FederatedRegistry) *models.FederatedRegistry); ok {
		r0 = rf(ctx, federatedRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FederatedRegistry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.FederatedRegistry) error); ok {
		r1 = rf(ctx, federatedRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
