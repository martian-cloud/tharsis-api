// Code generated by mockery v2.53.0. DO NOT EDIT.

package cli

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockTerraformCLIStore is an autogenerated mock type for the TerraformCLIStore type
type MockTerraformCLIStore struct {
	mock.Mock
}

// CreateTerraformCLIBinaryPresignedURL provides a mock function with given fields: ctx, version, os, architecture
func (_m *MockTerraformCLIStore) CreateTerraformCLIBinaryPresignedURL(ctx context.Context, version string, os string, architecture string) (string, error) {
	ret := _m.Called(ctx, version, os, architecture)

	if len(ret) == 0 {
		panic("no return value specified for CreateTerraformCLIBinaryPresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, version, os, architecture)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, version, os, architecture)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, version, os, architecture)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoesTerraformCLIBinaryExist provides a mock function with given fields: ctx, version, os, architecture
func (_m *MockTerraformCLIStore) DoesTerraformCLIBinaryExist(ctx context.Context, version string, os string, architecture string) (bool, error) {
	ret := _m.Called(ctx, version, os, architecture)

	if len(ret) == 0 {
		panic("no return value specified for DoesTerraformCLIBinaryExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, version, os, architecture)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, version, os, architecture)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, version, os, architecture)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadTerraformCLIBinary provides a mock function with given fields: ctx, version, os, architecture, body
func (_m *MockTerraformCLIStore) UploadTerraformCLIBinary(ctx context.Context, version string, os string, architecture string, body io.Reader) error {
	ret := _m.Called(ctx, version, os, architecture, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadTerraformCLIBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader) error); ok {
		r0 = rf(ctx, version, os, architecture, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTerraformCLIStore creates a new instance of MockTerraformCLIStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTerraformCLIStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTerraformCLIStore {
	mock := &MockTerraformCLIStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
