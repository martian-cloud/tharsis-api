// Code generated by mockery v2.20.0. DO NOT EDIT.

package job

import (
	context "context"

	db "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/db"
	logstream "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/logstream"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// ClaimJob provides a mock function with given fields: ctx, runnerPath
func (_m *MockService) ClaimJob(ctx context.Context, runnerPath string) (*ClaimJobResponse, error) {
	ret := _m.Called(ctx, runnerPath)

	var r0 *ClaimJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ClaimJobResponse, error)); ok {
		return rf(ctx, runnerPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ClaimJobResponse); ok {
		r0 = rf(ctx, runnerPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClaimJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runnerPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, jobID
func (_m *MockService) GetJob(ctx context.Context, jobID string) (*models.Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Job, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobs provides a mock function with given fields: ctx, input
func (_m *MockService) GetJobs(ctx context.Context, input *GetJobsInput) (*db.JobsResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *db.JobsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetJobsInput) (*db.JobsResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetJobsInput) *db.JobsResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.JobsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetJobsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsByIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetJobsByIDs(ctx context.Context, idList []string) ([]models.Job, error) {
	ret := _m.Called(ctx, idList)

	var r0 []models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.Job, error)); ok {
		return rf(ctx, idList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.Job); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestJobForRun provides a mock function with given fields: ctx, run
func (_m *MockService) GetLatestJobForRun(ctx context.Context, run *models.Run) (*models.Job, error) {
	ret := _m.Called(ctx, run)

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) (*models.Job, error)); ok {
		return rf(ctx, run)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) *models.Job); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogStreamsByJobIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetLogStreamsByJobIDs(ctx context.Context, idList []string) ([]models.LogStream, error) {
	ret := _m.Called(ctx, idList)

	var r0 []models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]models.LogStream, error)); ok {
		return rf(ctx, idList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.LogStream); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLogs provides a mock function with given fields: ctx, jobID, startOffset, limit
func (_m *MockService) ReadLogs(ctx context.Context, jobID string, startOffset int, limit int) ([]byte, error) {
	ret := _m.Called(ctx, jobID, startOffset, limit)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]byte, error)); ok {
		return rf(ctx, jobID, startOffset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []byte); ok {
		r0 = rf(ctx, jobID, startOffset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, jobID, startOffset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToCancellationEvent provides a mock function with given fields: ctx, options
func (_m *MockService) SubscribeToCancellationEvent(ctx context.Context, options *CancellationSubscriptionsOptions) (<-chan *CancellationEvent, error) {
	ret := _m.Called(ctx, options)

	var r0 <-chan *CancellationEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CancellationSubscriptionsOptions) (<-chan *CancellationEvent, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CancellationSubscriptionsOptions) <-chan *CancellationEvent); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *CancellationEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CancellationSubscriptionsOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToJobs provides a mock function with given fields: ctx, options
func (_m *MockService) SubscribeToJobs(ctx context.Context, options *SubscribeToJobsInput) (<-chan *Event, error) {
	ret := _m.Called(ctx, options)

	var r0 <-chan *Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SubscribeToJobsInput) (<-chan *Event, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SubscribeToJobsInput) <-chan *Event); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SubscribeToJobsInput) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToLogStreamEvents provides a mock function with given fields: ctx, options
func (_m *MockService) SubscribeToLogStreamEvents(ctx context.Context, options *LogStreamEventSubscriptionOptions) (<-chan *logstream.LogEvent, error) {
	ret := _m.Called(ctx, options)

	var r0 <-chan *logstream.LogEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LogStreamEventSubscriptionOptions) (<-chan *logstream.LogEvent, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LogStreamEventSubscriptionOptions) <-chan *logstream.LogEvent); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *logstream.LogEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LogStreamEventSubscriptionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteLogs provides a mock function with given fields: ctx, jobID, startOffset, logs
func (_m *MockService) WriteLogs(ctx context.Context, jobID string, startOffset int, logs []byte) (int, error) {
	ret := _m.Called(ctx, jobID, startOffset, logs)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) (int, error)); ok {
		return rf(ctx, jobID, startOffset, logs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) int); ok {
		r0 = rf(ctx, jobID, startOffset, logs)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, []byte) error); ok {
		r1 = rf(ctx, jobID, startOffset, logs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
