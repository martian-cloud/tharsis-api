// Code generated by mockery v2.14.0. DO NOT EDIT.

package job

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetJob provides a mock function with given fields: ctx, jobID
func (_m *MockService) GetJob(ctx context.Context, jobID string) (*models.Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *models.Job
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobLogDescriptor provides a mock function with given fields: ctx, job
func (_m *MockService) GetJobLogDescriptor(ctx context.Context, job *models.Job) (*models.JobLogDescriptor, error) {
	ret := _m.Called(ctx, job)

	var r0 *models.JobLogDescriptor
	if rf, ok := ret.Get(0).(func(context.Context, *models.Job) *models.JobLogDescriptor); ok {
		r0 = rf(ctx, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobLogDescriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsByIDs provides a mock function with given fields: ctx, idList
func (_m *MockService) GetJobsByIDs(ctx context.Context, idList []string) ([]models.Job, error) {
	ret := _m.Called(ctx, idList)

	var r0 []models.Job
	if rf, ok := ret.Get(0).(func(context.Context, []string) []models.Job); ok {
		r0 = rf(ctx, idList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, idList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestJobForRun provides a mock function with given fields: ctx, run
func (_m *MockService) GetLatestJobForRun(ctx context.Context, run *models.Run) (*models.Job, error) {
	ret := _m.Called(ctx, run)

	var r0 *models.Job
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run) *models.Job); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: ctx, jobID, startOffset, limit
func (_m *MockService) GetLogs(ctx context.Context, jobID string, startOffset int, limit int) ([]byte, error) {
	ret := _m.Called(ctx, jobID, startOffset, limit)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []byte); ok {
		r0 = rf(ctx, jobID, startOffset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, jobID, startOffset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextAvailableQueuedJob provides a mock function with given fields: ctx, runnerID
func (_m *MockService) GetNextAvailableQueuedJob(ctx context.Context, runnerID string) (*models.Job, error) {
	ret := _m.Called(ctx, runnerID)

	var r0 *models.Job
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Job); ok {
		r0 = rf(ctx, runnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runnerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLogs provides a mock function with given fields: ctx, jobID, startOffset, buffer
func (_m *MockService) SaveLogs(ctx context.Context, jobID string, startOffset int, buffer []byte) error {
	ret := _m.Called(ctx, jobID, startOffset, buffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) error); ok {
		r0 = rf(ctx, jobID, startOffset, buffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToCancellationEvent provides a mock function with given fields: ctx, options
func (_m *MockService) SubscribeToCancellationEvent(ctx context.Context, options *CancellationSubscriptionsOptions) (<-chan *CancellationEvent, error) {
	ret := _m.Called(ctx, options)

	var r0 <-chan *CancellationEvent
	if rf, ok := ret.Get(0).(func(context.Context, *CancellationSubscriptionsOptions) <-chan *CancellationEvent); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *CancellationEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancellationSubscriptionsOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToJobLogEvents provides a mock function with given fields: ctx, job, options
func (_m *MockService) SubscribeToJobLogEvents(ctx context.Context, job *models.Job, options *LogEventSubscriptionOptions) (<-chan *LogEvent, error) {
	ret := _m.Called(ctx, job, options)

	var r0 <-chan *LogEvent
	if rf, ok := ret.Get(0).(func(context.Context, *models.Job, *LogEventSubscriptionOptions) <-chan *LogEvent); ok {
		r0 = rf(ctx, job, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *LogEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Job, *LogEventSubscriptionOptions) error); ok {
		r1 = rf(ctx, job, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
