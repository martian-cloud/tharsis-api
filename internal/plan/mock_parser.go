// Code generated by mockery v2.53.0. DO NOT EDIT.

package plan

import (
	tfjson "github.com/hashicorp/terraform-json"
	mock "github.com/stretchr/testify/mock"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: plan, schemas
func (_m *MockParser) Parse(plan *tfjson.Plan, schemas *tfjson.ProviderSchemas) (*Diff, error) {
	ret := _m.Called(plan, schemas)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *Diff
	var r1 error
	if rf, ok := ret.Get(0).(func(*tfjson.Plan, *tfjson.ProviderSchemas) (*Diff, error)); ok {
		return rf(plan, schemas)
	}
	if rf, ok := ret.Get(0).(func(*tfjson.Plan, *tfjson.ProviderSchemas) *Diff); ok {
		r0 = rf(plan, schemas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Diff)
		}
	}

	if rf, ok := ret.Get(1).(func(*tfjson.Plan, *tfjson.ProviderSchemas) error); ok {
		r1 = rf(plan, schemas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
