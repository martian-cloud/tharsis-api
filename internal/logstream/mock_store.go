// Code generated by mockery v2.20.0. DO NOT EDIT.

package logstream

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// ReadLogs provides a mock function with given fields: ctx, logStreamID, startOffset, limit
func (_m *MockStore) ReadLogs(ctx context.Context, logStreamID string, startOffset int, limit int) ([]byte, error) {
	ret := _m.Called(ctx, logStreamID, startOffset, limit)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]byte, error)); ok {
		return rf(ctx, logStreamID, startOffset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []byte); ok {
		r0 = rf(ctx, logStreamID, startOffset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, logStreamID, startOffset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteLogs provides a mock function with given fields: ctx, logStreamID, startOffset, buffer
func (_m *MockStore) WriteLogs(ctx context.Context, logStreamID string, startOffset int, buffer []byte) error {
	ret := _m.Called(ctx, logStreamID, startOffset, buffer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) error); ok {
		r0 = rf(ctx, logStreamID, startOffset, buffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
