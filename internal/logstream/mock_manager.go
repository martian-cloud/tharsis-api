// Code generated by mockery v2.20.0. DO NOT EDIT.

package logstream

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-api/internal/models"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// ReadLogs provides a mock function with given fields: ctx, logStreamID, startOffset, limit
func (_m *MockManager) ReadLogs(ctx context.Context, logStreamID string, startOffset int, limit int) ([]byte, error) {
	ret := _m.Called(ctx, logStreamID, startOffset, limit)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]byte, error)); ok {
		return rf(ctx, logStreamID, startOffset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []byte); ok {
		r0 = rf(ctx, logStreamID, startOffset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, logStreamID, startOffset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, options
func (_m *MockManager) Subscribe(ctx context.Context, options *SubscriptionOptions) (<-chan *LogEvent, error) {
	ret := _m.Called(ctx, options)

	var r0 <-chan *LogEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SubscriptionOptions) (<-chan *LogEvent, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SubscriptionOptions) <-chan *LogEvent); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *LogEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SubscriptionOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteLogs provides a mock function with given fields: ctx, logStreamID, startOffset, buffer
func (_m *MockManager) WriteLogs(ctx context.Context, logStreamID string, startOffset int, buffer []byte) (*models.LogStream, error) {
	ret := _m.Called(ctx, logStreamID, startOffset, buffer)

	var r0 *models.LogStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) (*models.LogStream, error)); ok {
		return rf(ctx, logStreamID, startOffset, buffer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, []byte) *models.LogStream); ok {
		r0 = rf(ctx, logStreamID, startOffset, buffer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LogStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, []byte) error); ok {
		r1 = rf(ctx, logStreamID, startOffset, buffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockManager(t mockConstructorTestingTNewMockManager) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
