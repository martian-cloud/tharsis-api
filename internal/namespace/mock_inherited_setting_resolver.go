// Code generated by mockery v2.53.0. DO NOT EDIT.

package namespace

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInheritedSettingResolver is an autogenerated mock type for the InheritedSettingResolver type
type MockInheritedSettingResolver struct {
	mock.Mock
}

// GetDriftDetectionEnabled provides a mock function with given fields: ctx, namespace
func (_m *MockInheritedSettingResolver) GetDriftDetectionEnabled(ctx context.Context, namespace Namespace) (*DriftDetectionEnabledSetting, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDriftDetectionEnabled")
	}

	var r0 *DriftDetectionEnabledSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Namespace) (*DriftDetectionEnabledSetting, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Namespace) *DriftDetectionEnabledSetting); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DriftDetectionEnabledSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Namespace) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunnerTags provides a mock function with given fields: ctx, namespace
func (_m *MockInheritedSettingResolver) GetRunnerTags(ctx context.Context, namespace Namespace) (*RunnerTagsSetting, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetRunnerTags")
	}

	var r0 *RunnerTagsSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Namespace) (*RunnerTagsSetting, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Namespace) *RunnerTagsSetting); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunnerTagsSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Namespace) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockInheritedSettingResolver creates a new instance of MockInheritedSettingResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInheritedSettingResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInheritedSettingResolver {
	mock := &MockInheritedSettingResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
