// Code generated by mockery v2.43.1. DO NOT EDIT.

package joblogger

import mock "github.com/stretchr/testify/mock"

// MockJobLogger is an autogenerated mock type for the JobLogger type
type MockJobLogger struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockJobLogger) Close() {
	_m.Called()
}

// Errorf provides a mock function with given fields: format, a
func (_m *MockJobLogger) Errorf(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Flush provides a mock function with given fields:
func (_m *MockJobLogger) Flush() {
	_m.Called()
}

// Infof provides a mock function with given fields: format, a
func (_m *MockJobLogger) Infof(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// Start provides a mock function with given fields:
func (_m *MockJobLogger) Start() {
	_m.Called()
}

// Write provides a mock function with given fields: data
func (_m *MockJobLogger) Write(data []byte) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockJobLogger creates a new instance of MockJobLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobLogger {
	mock := &MockJobLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
