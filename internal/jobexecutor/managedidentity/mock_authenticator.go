// Code generated by mockery v2.53.0. DO NOT EDIT.

package managedidentity

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-sdk-go/pkg/types"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, managedIdentities, credsRetriever
func (_m *MockAuthenticator) Authenticate(ctx context.Context, managedIdentities []types.ManagedIdentity, credsRetriever func(context.Context, *types.ManagedIdentity) ([]byte, error)) (*AuthenticateResponse, error) {
	ret := _m.Called(ctx, managedIdentities, credsRetriever)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *AuthenticateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.ManagedIdentity, func(context.Context, *types.ManagedIdentity) ([]byte, error)) (*AuthenticateResponse, error)); ok {
		return rf(ctx, managedIdentities, credsRetriever)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.ManagedIdentity, func(context.Context, *types.ManagedIdentity) ([]byte, error)) *AuthenticateResponse); ok {
		r0 = rf(ctx, managedIdentities, credsRetriever)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthenticateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.ManagedIdentity, func(context.Context, *types.ManagedIdentity) ([]byte, error)) error); ok {
		r1 = rf(ctx, managedIdentities, credsRetriever)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: ctx
func (_m *MockAuthenticator) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
