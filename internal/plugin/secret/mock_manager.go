// Code generated by mockery v2.20.0. DO NOT EDIT.

package secret

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, key, value
func (_m *MockManager) Create(ctx context.Context, key string, value string) ([]byte, error) {
	ret := _m.Called(ctx, key, value)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key, secretData
func (_m *MockManager) Get(ctx context.Context, key string, secretData []byte) (string, error) {
	ret := _m.Called(ctx, key, secretData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, key, secretData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, key, secretData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, key, secretData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, key, secretData, newValue
func (_m *MockManager) Update(ctx context.Context, key string, secretData []byte, newValue string) ([]byte, error) {
	ret := _m.Called(ctx, key, secretData, newValue)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, string) ([]byte, error)); ok {
		return rf(ctx, key, secretData, newValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, string) []byte); ok {
		r0 = rf(ctx, key, secretData, newValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, string) error); ok {
		r1 = rf(ctx, key, secretData, newValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockManager(t mockConstructorTestingTNewMockManager) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
