// Code generated by mockery v2.14.0. DO NOT EDIT.

package kubernetes

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/batch/v1"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: _a0, _a1
func (_m *mockClient) CreateJob(_a0 context.Context, _a1 *v1.Job) (*v1.Job, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Job
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Job) *v1.Job); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Job) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockClient(t mockConstructorTestingTnewMockClient) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
