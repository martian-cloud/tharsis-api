// Code generated by mockery v2.20.0. DO NOT EDIT.

package maintenance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMonitor is an autogenerated mock type for the Monitor type
type MockMonitor struct {
	mock.Mock
}

// InMaintenanceMode provides a mock function with given fields: ctx
func (_m *MockMonitor) InMaintenanceMode(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx
func (_m *MockMonitor) Start(ctx context.Context) {
	_m.Called(ctx)
}

type mockConstructorTestingTNewMockMonitor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMonitor creates a new instance of MockMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMonitor(t mockConstructorTestingTNewMockMonitor) *MockMonitor {
	mock := &MockMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
