// Code generated by mockery v2.53.0. DO NOT EDIT.

package jws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, keyID
func (_m *MockProvider) Create(ctx context.Context, keyID string) (*CreateKeyResponse, error) {
	ret := _m.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *CreateKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*CreateKeyResponse, error)); ok {
		return rf(ctx, keyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *CreateKeyResponse); ok {
		r0 = rf(ctx, keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, keyID, keyData
func (_m *MockProvider) Delete(ctx context.Context, keyID string, keyData []byte) error {
	ret := _m.Called(ctx, keyID, keyData)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, keyID, keyData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sign provides a mock function with given fields: ctx, token, keyID, keyData, publicKeyID
func (_m *MockProvider) Sign(ctx context.Context, token []byte, keyID string, keyData []byte, publicKeyID string) ([]byte, error) {
	ret := _m.Called(ctx, token, keyID, keyData, publicKeyID)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, []byte, string) ([]byte, error)); ok {
		return rf(ctx, token, keyID, keyData, publicKeyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, []byte, string) []byte); ok {
		r0 = rf(ctx, token, keyID, keyData, publicKeyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string, []byte, string) error); ok {
		r1 = rf(ctx, token, keyID, keyData, publicKeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportsKeyRotation provides a mock function with no fields
func (_m *MockProvider) SupportsKeyRotation() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsKeyRotation")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
