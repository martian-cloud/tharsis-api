// Code generated by mockery v2.53.0. DO NOT EDIT.

package objectstore

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

// DoesObjectExist provides a mock function with given fields: ctx, key
func (_m *MockObjectStore) DoesObjectExist(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DoesObjectExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadObject provides a mock function with given fields: ctx, key, w, option
func (_m *MockObjectStore) DownloadObject(ctx context.Context, key string, w io.WriterAt, option *DownloadOptions) error {
	ret := _m.Called(ctx, key, w, option)

	if len(ret) == 0 {
		panic("no return value specified for DownloadObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.WriterAt, *DownloadOptions) error); ok {
		r0 = rf(ctx, key, w, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetObjectStream provides a mock function with given fields: ctx, key, options
func (_m *MockObjectStore) GetObjectStream(ctx context.Context, key string, options *DownloadOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, key, options)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectStream")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *DownloadOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, key, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *DownloadOptions) io.ReadCloser); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *DownloadOptions) error); ok {
		r1 = rf(ctx, key, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresignedURL provides a mock function with given fields: ctx, key
func (_m *MockObjectStore) GetPresignedURL(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadObject provides a mock function with given fields: ctx, key, body
func (_m *MockObjectStore) UploadObject(ctx context.Context, key string, body io.Reader) error {
	ret := _m.Called(ctx, key, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, key, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStore {
	mock := &MockObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
